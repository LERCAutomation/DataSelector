'* DataSelector is a MapBasic tool and associated SQL scripts to extract
'* biodiversity information from SQL Server based on any selection criteria.
'*
'* Copyright © 2015 - 2019 TVERC, GiGL, SBIC
'* Copyright © 2020 - 2021 Andy Foy Consulting
'* 
'* This file is part of the MapInfo tool 'DataSelector'.
'* 
'* DataSelector is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSelector is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSelector.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* DataSelector v1.0.24
'*
'* Creates a dialog window which lists the SQL tables
'* in the remote SQL Server and allows the user to enter a
'* where clause and group by and order by text to select a
'* subset of the SQL records. It will then create a
'* MapInfo .tab file, ArcGIS .shp file, .txt or .csv file
'* of the selected records.
'*
'* Created:         Andy Foy - June 2015
'* Last revised:    Andy Foy - March 2021
'*
'* *******************  Version 1.0.24  ***************
'* Author: Andy Foy		Date: 26/03/2021
'* A. Fix bug loading multiple symbology sets.
'* B. Remove check for size column before setting
'*    symbology.
'*
'* *******************  Version 1.0.23  ***************
'* Author: Andy Foy		Date: 01/07/2019
'* A. Enable loading XML profiles when running in 64bit.
'* B. Create log file path if missing.
'* C. Add details of funding organisations to About box.
'*
'* *******************  Version 1.0.22  ***************
'* Author: Andy Foy		Date: 05/06/2019
'* A. Allow user to select XML profile to use.
'* B. Add "DefaultClearLogFile" option to XML.
'*
'* *******************  Version 1.0.21  ***************
'* Author: Andy Foy		Date: 17/12/2018
'* A. Truncate user ID if it means the temporary SQL
'*    will be too long for the MapCatalog (> 32 chars).
'*
'* *******************  Version 1.0.20  ***************
'* Author: Andy Foy		Date: 13/12/2018
'* A. Use schema when calling stored procedures.
'*
'* *****************  Version 1.0.19  ***************
'* Author: Andy Foy		Date: 22/10/2018
'* A. Include new tool buttons for MI Pro 64bit.
'* B. Check output files start with alphabetic characters.
'*
'* *****************  Version 1.0.18  ***************
'* Author: Andy Foy		Date: 16/03/2018
'* A. Check top window is map window before trying to
'*    add output layer.
'*
'* *****************  Version 1.0.17  ***************
'* Author: Andy Foy		Date: 09/11/2017
'* A. Replace single quotes in all SQL clauses.
'*
'* *****************  Version 1.0.16  ***************
'* Author: Andy Foy		Date: 25/01/2017
'* A. Enable symbology clauses to be blank.
'*
'* *****************  Version 1.0.15  ***************
'* Author: Andy Foy		Date: 26/11/2016
'* A. Double-click SQL table to paste list of columns
'*    into columns clause.
'*
'* *****************  Version 1.0.14  ***************
'* Author: Andy Foy		Date: 01/08/2016
'* A. Fix bug when dropping unnecessary style and 
'*    primary index columns.
'*
'* *****************  Version 1.0.13  ***************
'* Author: Andy Foy		Date: 14/07/2016
'* A. Created 'max' size dialog option for users who
'*    want to see more SQL text at once.
'*
'* *****************  Version 1.0.12  ***************
'* Author: Andy Foy		Date: 14/07/2016
'* A. Enable separate instances for tool to run under
'*    different names in Tool menu.
'*
'* *****************  Version 1.0.11  ***************
'* Author: Andy Foy		Date: 12/07/2016
'* A. Autofill file name when saving a previously
'*    opened query.
'*
'* *****************  Version 1.0.10  ***************
'* Author: Andy Foy		Date: 30/05/2016
'* A. Change version number to 3 parts.
'*
'* *****************  Version 1.09  *****************
'* Author: Andy Foy		Date: 05/04/2016
'* A. Fix premature disconnection error when dialog
'*    remains open.
'* B. Set default value for spatial plotting.
'*
'* *****************  Version 1.08  *****************
'* Author: Andy Foy		Date: 09/03/2016
'* A. Ask user if they want to keep the dialog open.
'* B. Open log file using Notepad.exe.
'*
'* *****************  Version 1.07  *****************
'* Author: Andy Foy		Date: 23/02/2016
'* A. Enable Tab-separated .txt files to be created.
'*
'* *****************  Version 1.06  *****************
'* Author: Andy Foy		Date: 16/02/2016
'* A. Don't close dialog until output file has been
'*    selected.
'*
'* *****************  Version 1.05  *****************
'* Author: Andy Foy		Date: 29/01/2016
'* A. Enable plotting columns to be deleted upon
'*    completion.
'*
'* *****************  Version 1.04  *****************
'* Author: Andy Foy		Date: 17/01/2016
'* A. Added option to choose symbology set from
'*    drop-down list.
'* B. Removed hard-coding of precision colum name.
'* C. Fix bug where plot column name drop-down lists
'*    appear when no SQL table selected.
'* D. Fix bug when output table name contains spaces.
'*
'* *****************  Version 1.03  *****************
'* Author: Andy Foy		Date: 08/09/2015
'* A. Added Group By and Order By fields in dialog.
'* B. Include Group By and Order By values in stored
'*    procedure.
'* C. Include Group By and Order By values when saving
'*    and loading to/from .qsf files.
'* D. Call new SQL stored procedures to create and
'*    clear selected subset tables.
'* E. Check if result contains spatial data and
'*    open in map or browser as applicable.
'* F. Remove default behaviour from 'Ok' button.
'* G. Added functionality to spatially plot points
'*    and polygons for non-spatial data.
'* H. Improved performance for setting symbology.
'* I. Display numbers with thousand separators in log.
'* 
'* *****************  Version 1.02  *****************
'* Author: Andy Foy		Date: 08/06/2015
'* A. Added userid to temporary SQL table name to enable
'*	concurrent use of tool.
'* 
'* *****************  Version 1.01  *****************
'* Author: Andy Foy		Date: 03/06/2015
'* A. Initial version of tool.
'* 
'***************************************************************
Include "DataSelector.def"

Sub Main
'***************************************************************
'* Main sub-routine
'***************************************************************

	OnError Goto HandleError

	'-------------------------------------------------
	' Set the version number
	'-------------------------------------------------
	sVersion = "1.0.24"

	'-------------------------------------------------
	' Get the title for the Tool menu
	'-------------------------------------------------
	Call GetToolTitle

	Call CreateToolMenu(sToolTitle)
	
	Exit Sub

HandleError:
	Note "Main: " + Error$()
	Resume Next

End Sub

Sub GetToolTitle
'***************************************************************
'* Retrieve the tool title to use from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode

	OnError Goto GetTitleError

	' Set the default Tool menu title
	sToolTitle = "Data Selector"

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSelector.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSelector node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSelector")
	          	If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataSelector node
					'-------------------------------------------------
					
					' Title for adding the program to the Tool menu
					Dim sTitle As String
					sTitle = GetSingleNodeValue(hXMLNode, "ToolTitle")
					If sTitle <> "" Then
						sToolTitle = sTitle
					End If

					' Default XML file
					sDefaultXMLFile = GetSingleNodeValue(hXMLNode, "DefaultProfile")
					If sDefaultXMLFile = "" Then
						sDefaultXMLFile = "DefaultProfile"
					End If
					
				End If

			End If

		Else

			Goto GetTitleError

		End If

	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetTitleError:
	Note "Unable to get tool title from XML config file.  Using default title 'Data Selector'."
	Goto CleanUp

End Sub

Sub GetDefaultValues(ByVal sXMLFile As String)
'***************************************************************
'* Retrieve all the default values from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode
	Dim hXMLSubNode As MIXmlNode
	Dim hXMLMapInfoTableNode As MIXmlNode
	Dim hXMLSymbolSetList As MIXMLNodeList
	Dim hXMLSymbolSetNode As MIXmlNode

	OnError Goto GetVariablesError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + sXMLFile, bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSelector node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSelector")
	          If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataSelector node
					'-------------------------------------------------
					' File path for for storing the log file
					Dim sLogFilePath As string
					sLogFilePath = GetSingleNodeValue(hXMLNode, "LogFilePath")
					sLogFileName = sLogFilePath & "\DataSelector_" & sUserID & ".log"

					' File DSN path and name containing remote SQL database connection settings
					sFileDSN = GetSingleNodeValue(hXMLNode, "FileDSN")

					' Default file path to store extracts
					sDefaultExtractPath = GetSingleNodeValue(hXMLNode, "DefaultExtractPath")

					' Default file path to save/load queries
					sDefaultQueryPath = GetSingleNodeValue(hXMLNode, "DefaultQueryPath")

					' Default database schema to use in the remote SQL database
					sDefaultSchema = GetSingleNodeValue(hXMLNode, "DatabaseSchema")

					' SQL used to list the names of SQL tables in the remote SQL database
					sTableListSQL = GetSingleNodeValue(hXMLNode, "TableListSQL")

					' Maximum number of records to be downloaded at one time
					iRecMax = GetSingleNodeValue(hXMLNode, "RecMax")

					' Default setting for the output file format
					sDefaultFormat = GetSingleNodeValue(hXMLNode, "DefaultFormat")

					' Default setting for the symbology set
					sDefaultSymbologySet = GetSingleNodeValue(hXMLNode, "DefaultSymbologySet")

					' Whether the SQL database tables can be spatially plotted
					sDefaultSpatialPlotting = GetSingleNodeValue(hXMLNode, "DefaultSpatialPlotting")
					If UCase$(sDefaultSpatialPlotting) = "Y"
					OR UCase$(sDefaultSpatialPlotting) = "YES"
					OR UCase$(sDefaultSpatialPlotting) = "N"
					OR UCase$(sDefaultSpatialPlotting) = "NO" Then
						bEnablePlotting = True
					Else
						bEnablePlotting = False
					End If

					' Coordinate system to be used for mapping
					sCoordSys = GetSingleNodeValue(hXMLNode, "CoordinateSystem")

					' Default setting for the points precision
					sDefaultPointPrecision = GetSingleNodeValue(hXMLNode, "DefaultPointsPrecision")

					' User interface dialog size
					sDialogSize = GetSingleNodeValue(hXMLNode, "DialogSize")

					' Default option to clear log file
					sDefaultClearLogFile= GetSingleNodeValue(hXMLNode, "DefaultClearLogFile")

					'-------------------------------------------------
					' Get a handle on the DefaultSpatialColumns node
					'-------------------------------------------------
					hXMLSubNode = MIXmlSelectSingleNode(hXMLNode, "DefaultSpatialColumns")
		          	If hXMLSubNode Then

						' Default column name for the eastings value
						sXColumn = GetSingleNodeValue(hXMLSubNode, "XColumn")

						' Default column name for the northings value
						sYColumn = GetSingleNodeValue(hXMLSubNode, "YColumn")

						' Default column name for the precision value
						sSizeColumn = GetSingleNodeValue(hXMLSubNode, "SizeColumn")

					End If
	
					'-------------------------------------------------
					' Get a handle on the MapTables node
					'-------------------------------------------------
					hXMLMapInfoTableNode = MIXmlSelectSingleNode(hXMLNode, "MapInfoTables")

					'-------------------------------------------------
					' Get a handle on the node map of the above node
					'-------------------------------------------------
					hXMLSymbolSetList = MIXMLGetChildList(hXMLMapInfoTableNode)

					'-------------------------------------------------
					' Get a handle on the first element in the node list
					'-------------------------------------------------
					hXMLSymbolSetNode = MIXMLGetNextNode(hXMLSymbolSetList)

					'-------------------------------------------------
					' Loop through all the elements in the node list
					' storing the symbol set names
					'-------------------------------------------------
					Redim aSymbolNodes(99)
					Redim aSymbolDescs(99)

					Dim i As Integer
					i = 1
					aSymbolNodes(i) = ""
					aSymbolDescs(i) = "<None>"
					Do while hXMLSymbolSetNode
						
						i = i + 1

						' Name of the Map node
						aSymbolNodes(i) = GetNodeName(hXMLSymbolSetNode)

						' Description of the MapInfo symbol set
						aSymbolDescs(i) = GetNodeAttributeValue(hXMLSymbolSetNode, "Desc")

						'-------------------------------------------------
						' Get a handle on the next attribute in the node list
						'-------------------------------------------------
						hXMLSymbolSetNode = MIXMLGetNextNode(hXMLSymbolSetList)
					Loop

					Redim aSymbolNodes(i)
					Redim aSymbolDescs(i)

				End If

			End If

		Else

			Note "Error opening XML config file 'DataSelector.xml'."

		End If

	End If

	'-------------------------------------------------
	' Create the log file directory path if it doesn't
	' already exist
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0

	iSuccess = SetCurrentDirectory(sLogFilePath)
	if iSuccess = 0 Then
		'Call MyPrint("Creating log file path '" + sLogFilePath + "'")
		'iSuccess = CreateDirectory(sLogFilePath , iSecurity)
		iSuccess = SHCreateDirectoryEx(0, sLogFilePath, iSecurity)
		if iSuccess <> 0 Then
			Call MyPrint("Error creating log file path")
			Call MyPrint("Process terminated.")
			sXMLFile = ""
			Goto CleanUp
		End If
	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLSymbolSetNode Then Call MIXmlNodeDestroy(hXMLSymbolSetNode) End If
	If hXMLSymbolSetList Then Call MIXmlNodeListDestroy(hXMLSymbolSetList) End If
	If hXMLMapInfoTableNode Then Call MIXmlNodeDestroy(hXMLMapInfoTableNode) End If
	If hXMLSubNode Then Call MIXmlNodeDestroy(hXMLSubNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetVariablesError:
	Note str$(Err()) + ": " + Error$()
	Goto Cleanup

End Sub

Sub DataSelector
'***************************************************************
'* Create the user dialog window
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
    OnError Goto ErrorTrap

	'-------------------------------------------------
	' Get the current user ID
	'-------------------------------------------------
	sUserID = GetUserID()
	sUserID = StringReplace(sUserID, " ", "_")
	sUserID = StringReplace(sUserID, ".", "_")

	'-------------------------------------------------
	' Prompt the user for their required config file
	'-------------------------------------------------
	sXMLFile = ""
	Call GetXmlProfile
	If sXMLFile = "" Then
		Exit Sub
	End If
	
	'-------------------------------------------------
	' Retrieve the default values from the config file
	'-------------------------------------------------
	Call GetDefaultValues(sXMLFile)

	'-------------------------------------------------
	' Maximise the dialog size if required
	'-------------------------------------------------
	Dim iDialogMax As Integer
	If UCASE$(sDialogSize) = "MAX" Then
		iDialogMax = 160
	Else
		iDialogMax = 0
	End If

	'-------------------------------------------------
	' Build a new dialog window
	'-------------------------------------------------
	Dialog
		Title "Data Selector " + sVersion
		Width 320 + iDialogMax
		Height 310 + iDialogMax
		Position 50,70
		Calling DialogSetup

	'-------------------------------------------------
	' Add a column names textbox
	'-------------------------------------------------
	Control StaticText
		Title "Columns:"
		Position 10,10
	Control EditText
		ID 1
		Position 10,20
		Height 105 + (iDialogMax * 0.5)
		Width 170 + iDialogMax
		'Into sColumnNames

	'-------------------------------------------------
	' Add a where clause textbox
	'-------------------------------------------------
	Control StaticText
		Title "Where:"
		Position 10,130 + (iDialogMax * 0.5)
	Control EditText
		ID 2
		Position 10,140 + (iDialogMax * 0.5)
		Height 50 + (iDialogMax * 0.25)
		Width 170 + iDialogMax
		'Into sWhereClause

	'-------------------------------------------------
	' Add a group by textbox
	'-------------------------------------------------
	Control StaticText
		Title "Group By:"
		Position 10,195 + (iDialogMax * 0.75)
	Control EditText
		ID 3
		Position 10,205 + (iDialogMax * 0.75)
		Height 30 + (iDialogMax * 0.125)
		Width 170 + iDialogMax
		'Into sGroupClause

	'-------------------------------------------------
	' Add an order by textbox
	'-------------------------------------------------
	Control StaticText
		Title "Order By:"
		Position 10,240 + (iDialogMax * 0.875)
	Control EditText
		ID 4
		Position 10,250 + (iDialogMax * 0.875)
		Height 30 + (iDialogMax * 0.125)
		Width 170 + iDialogMax
		'Into sOrderClause

	'-------------------------------------------------
	' Add a SQL table listbox
	'-------------------------------------------------
	Control StaticText
		Title "SQL Tables:"
		Position 190 + iDialogMax,10
	Control ListBox
		ID 5
		Title ""
		Position 190 + iDialogMax, 20
		Height 40 + (iDialogMax * 0.5)
		Width 120
		Calling SetSpatialColumns

	'-------------------------------------------------
	' Add a dropdown list for the output format
	'-------------------------------------------------
	Control StaticText
		Title "Output File Format:"
		Position 190 + iDialogMax,67 + (iDialogMax * 0.5)
	Control PopupMenu
		ID 6
		Title "MapInfo (.tab) file;ESRI (.shp) file;Comma-Separated (.csv) file;Tab-Separated (.txt) file"
		Position 190 + iDialogMax,77 + (iDialogMax * 0.5)
		Width 120
		Value 1
		'Into iOutputFormat
		Calling SetFileFormat

	'-------------------------------------------------
	' Add a dropdown list for the symbology sets
	'-------------------------------------------------
	Control StaticText
		ID 30
		Title "Symbology Set:"
		Position 190 + iDialogMax,102 + (iDialogMax * 0.5)
	Control PopupMenu
		ID 31
		Title "<None>"
		Position 190 + iDialogMax,112 + (iDialogMax * 0.5)
		Width 120
		Value 1
		'Into iSymbologySet

	'-------------------------------------------------
	' Add a checkbox for plotting spatially
	'-------------------------------------------------
	Control CheckBox
		ID 12
		Title "Plot data spatially?"
		Position 190 + iDialogMax,140 + (iDialogMax * 0.5)
		Value FALSE
		Hide
		'Into bPlotSpatialData
		Calling SetPlotData

	'-------------------------------------------------
	' Add a group box for non-spatial data
	'-------------------------------------------------
	Control GroupBox
		ID 20
		Title "Non-spatial data"
		Position 185 + iDialogMax,157 + (iDialogMax * 0.5)
		Height 123
		Width 125
		Hide

	'-------------------------------------------------
	' Add a popup menu for the X Column
	'-------------------------------------------------
	Control StaticText
		ID 21
		Title "X Col:"
		Position 190 + iDialogMax,175 + (iDialogMax * 0.5)
		Hide
	Control PopUpMenu
		ID 22
		Position 230 + iDialogMax,173 + (iDialogMax * 0.5)
		Width 75
		Title ""
		Hide

	'-------------------------------------------------
	' Add a popup menu for the Y Column
	'-------------------------------------------------
	Control StaticText
		ID 23
		Title "Y Col:"
		Position 190 + iDialogMax,195 + (iDialogMax * 0.5)
		Hide
	Control PopUpMenu
		ID 24
		Position 230 + iDialogMax,193 + (iDialogMax * 0.5)
		Width 75
		Title ""
		Hide

	'-------------------------------------------------
	' Add a popup menu for the Size Column
	'-------------------------------------------------
	Control StaticText
		ID 25
		Title "Size Col:"
		Position 190 + iDialogMax,215 + (iDialogMax * 0.5)
		Hide
	Control PopUpMenu
		ID 26
		Position 230 + iDialogMax,213 + (iDialogMax * 0.5)
		Width 75
		Title ""
		Hide

	'-------------------------------------------------
	' Add a maximum points precision textbox
	'-------------------------------------------------
	Control StaticText
		ID 27
		Title "Max Points Precision:"
		Position 190 + iDialogMax,240 + (iDialogMax * 0.5)
		Hide
	Control EditText
		ID 28
		Position 265 + iDialogMax,238 + (iDialogMax * 0.5)
		Height 14
		Width 40
		Hide
		'Into sMaxPointsPrecision

	'-------------------------------------------------
	' Add a checkbox for deleting columns after plotting
	'-------------------------------------------------
	Control CheckBox
		ID 40
		Title "Delete columns after plotting?"
		Position 190 + iDialogMax,263 + (iDialogMax * 0.5)
		Value FALSE
		Hide
		'Into bDeletePlotColumns

	'-------------------------------------------------
	' Add a checkbox for clearing the log file
	'-------------------------------------------------
	Control CheckBox
		ID 8
		Title "Clear log file?"
		Position 10,290 + iDialogMax
		Value FALSE
		'Into bClearLog

	'-------------------------------------------------
	' Add Save and Load buttons
	'-------------------------------------------------
	Control Button
		ID 9
		Title "Save"
		Position 95 + iDialogMax,290 + iDialogMax
		Width 40
		Calling SaveQuery
	Control Button
		ID 10
		Title "Load"
		Position 140 + iDialogMax,290 + iDialogMax
		Width 40
		Calling LoadQuery

	'-------------------------------------------------
	' Add Ok and Cancel buttons
	'-------------------------------------------------
	Control CancelButton
		Position 225 + iDialogMax,290 + iDialogMax
		Width 40
	Control Button
		ID 11
		Title "Ok"
		Position 270 + iDialogMax,290 + iDialogMax
		Width 40
		Calling CheckSelection

Done:
	'-------------------------------------------------
	' Disconnect the connection to the SQL Server database
	'-------------------------------------------------
	If nConn <> 0 Then
		Server nConn Disconnect
	End If

	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint("Error: " + str$(Err()) + " - " + Error$())
	Resume Done

End Sub

Sub GetXMLProfile()
'***************************************************************
'* Create the user dialog window
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
    OnError Goto ErrorTrap

	'-------------------------------------------------
	' Get an array of all the XML profiles in the
	' same file directory as the application
	'-------------------------------------------------
	Dim sDir As String
	sDir = ApplicationDirectory$()
	
	Dim sFileExclude As String
	sFileExclude = "DataSelector.xml"
	
	Dim bResult As Logical
	Dim sFileNames() as String
	bResult = GetFileList(sDir, "*.xml" , sFileNames(), sFileExclude)
	
	'-------------------------------------------------
	' Loop through all the XML profiles
	'-------------------------------------------------
	Dim i as integer
	Dim sXMLFiles As String
	sXMLFiles = ""
	iDefaultXMLFile = 0
	If bResult = True And UBound(sFileNames()) > 0 Then
	
		For i = 1 to UBound(sFileNames())
		
			'-------------------------------------------------
			' Build a string of the XML profiles
			'-------------------------------------------------
			sXMLFiles = sXMLFiles + sFileNames(i) + ";"
			
			If UCase$(sFileNames(i)) = UCase$(sDefaultXMLFile) Then
				iDefaultXMLFile = i
			End If
	
		Next
		
		sXMLFiles = Left$(sXMLFiles, Len(sXMLFiles) - 1)

	Else

		Note "There are no profile XML files in '" + ApplicationDirectory$() + "'"
		Goto Done

	End If	
	
	If UBound(sFileNames()) = 1 Then
		sXMLFile = sFileNames(1) + ".xml"
		Goto Done
	End If
	
	'-------------------------------------------------
	' Build a new dialog window
	'-------------------------------------------------
	Dialog
		Title "Data Selector " + sVersion
		Width 190
		Height 80
		Position 50, 70

	'-------------------------------------------------
	' Add a profile table listbox
	'-------------------------------------------------
	Control StaticText Title "Please Choose a Profile:"
		Position 10, 10
	Control PopupMenu
		ID 1
		Title From Variable sXMLFiles
		Value iDefaultXMLFile
		Position 10, 20
		Height 10
		Width 170
		Into iXMLFile

	'-------------------------------------------------
	' Add Ok and cancel buttons
	'-------------------------------------------------
	Control CancelButton
		Position 95,60
		Width 40
	Control OkButton
		Title "Ok"
		Position 140,60
		Width 40
		'Calling CheckSelection

	'-------------------------------------------------
	' Store the dialog variables
	'-------------------------------------------------
	If CommandInfo(CMD_INFO_DLG_OK) Then
		sXMLFile = sFileNames(iXMLFile) + ".xml"
	Else
		sXMLFile = ""
	End If

	'-------------------------------------------------
	' Close the dialog
	'-------------------------------------------------
	'Dialog Remove

Done:
	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Resume Done

End Sub

Sub DialogSetup
'***************************************************************
' Setup the dialog window listboxes
'***************************************************************

	'-------------------------------------------------
	' Clear the Message window and close it
	'-------------------------------------------------
	Print(chr$(12))
	Close Window Message

	'-------------------------------------------------
	' Trap any connection errors
	'-------------------------------------------------
	OnError Goto ConnectionError

	'-------------------------------------------------
	' Connect to the SQL Server database
	'-------------------------------------------------
	nConn = Server_Connect("ODBC","FILEDSN=" + sFileDSN)
	If nConn = 0 Then
		Note "Error: Unable to connect to SQL Server!"
		Call egsit
	End If 

	'-------------------------------------------------
	' No longer trap any errors
	'-------------------------------------------------
	OnError Goto 0

	'-------------------------------------------------
	' Query all the tables in the database
	'-------------------------------------------------
	Dim nStmt as Integer
	nStmt = Server_Execute(nConn, sTableListSQL)

	'-------------------------------------------------
	' Bind to the 1st column of the results
	'-------------------------------------------------
	Dim aSQLTable As String
	Dim iStatus As Integer
	Server nStmt Bind Column 1 To aSQLTable, iStatus
	Server nStmt Fetch Next

	'-------------------------------------------------
	' Loop through all the Species tables matching the
	' SQL criteria and add them to the Species Tables list
	'-------------------------------------------------
	Dim i as integer
	i = 1
	While Not Server_Eot(nStmt)

		'-------------------------------------------------
		' Concatenate all the Species tables into an array
		'-------------------------------------------------
		Redim aSQLTables(i)
		aSQLTables(i) = aSQLTable
		Server nStmt Fetch Next
		i = i + 1

	Wend

	'-------------------------------------------------
	' Close the query results
	'-------------------------------------------------
	Server nStmt Close

	'-------------------------------------------------
	' Update the Species Table list to show the list
	' of tables
	'-------------------------------------------------
	Alter Control 5 Title FROM Variable aSQLTables

	'-------------------------------------------------
	' Update the Symbology Set list to show the list
	' of symbology sets
	'-------------------------------------------------
	Alter Control 31 Title FROM Variable aSymbolDescs

	'-------------------------------------------------
	' Show or hide the spatial controls
	'-------------------------------------------------
	If bEnablePlotting Then
		Alter Control 12 Show
		If UCase$(sDefaultSpatialPlotting) = "Y" OR UCase$(sDefaultSpatialPlotting) = "YES" Then
			Alter Control 20 Show
			Alter Control 21 Show
			Alter Control 22 Show
			Alter Control 23 Show
			Alter Control 24 Show
			Alter Control 25 Show
			Alter Control 26 Show
			Alter Control 27 Show
			Alter Control 28 Show
			Alter Control 40 Show
		Else
			Alter Control 20 Hide
			Alter Control 21 Hide
			Alter Control 22 Hide
			Alter Control 23 Hide
			Alter Control 24 Hide
			Alter Control 25 Hide
			Alter Control 26 Hide
			Alter Control 27 Hide
			Alter Control 28 Hide
			Alter Control 40 Hide
		End If
	End If

SetDefaults:
	'-------------------------------------------------
	' Set the default value for the output format
	'-------------------------------------------------
	Do Case UCase$(sDefaultFormat)
		Case "TAB"
			Alter Control 6 Value 1
		Case "SHP"
			Alter Control 6 Value 2
		Case "CSV"
			Alter Control 6 Value 3
		Case "TXT"
			Alter Control 6 Value 4
		Case Else
			Alter Control 6 Value 1
	End Case

	'-------------------------------------------------
	' Set the default value for clearing the log file
	'-------------------------------------------------
	If UCase$(sDefaultClearLogFile) = "YES" OR UCase$(sDefaultClearLogFile) = "Y" Then
		Alter Control 8 Value TRUE
	Else
		Alter Control 8 Value FALSE
	End If

	'-------------------------------------------------
	' Set the default Symbology Set value
	'-------------------------------------------------
	If Val(sDefaultSymbologySet) >= 0 And
	   Val(sDefaultSymbologySet) < UBound(aSymbolDescs) Then
		Alter Control 31 Value Val(sDefaultSymbologySet) + 1
	End If

	'-------------------------------------------------
	' Set the default spatial plotting checkbox
	' and maximum point precision
	'-------------------------------------------------
	If UCase$(sDefaultSpatialPlotting) = "Y" OR UCase$(sDefaultSpatialPlotting) = "YES" Then
		Alter Control 12 Value TRUE
		Alter Control 28 Value Str$(val(sDefaultPointPrecision))
	End If

	'-------------------------------------------------
	' Clear the name of the query file
	'-------------------------------------------------
	sCurrentQueryName = ""

Exit Sub

ConnectionError:

If Err() = 1333 Then
	Note "Error: Unable to connect to SQL Server!"
'	Call MyPrint("Error: Unable to connect to SQL Server!")
	Call egsit
End If

End Sub

Sub SaveQuery
'***************************************************************
'* Save the current query details to a text file
'***************************************************************

	'-------------------------------------------------
	' Prompt the user for the query file destination
	'-------------------------------------------------
	Dim sQueryFile As String
	sQueryFile = FileSaveAsDlg(sDefaultQueryPath, sCurrentQueryName, "qsf", "Select where to save the query")
	if sQueryFile = "" then
		Note "No query file selected - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected query file
	'-------------------------------------------------
	Dim sQueryPath, sQueryName As String
	sQueryPath = PathToDirectory$(sQueryFile)
	sQueryName = PathToFileName$(sQueryFile)

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sQueryPath)
	if iSuccess = 0 Then
		Note "Query folder does not exist - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sQueryName, 3)) <> UCase$("QSF") Then
		Note "Query file has incorrect extension - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Clear the query file if it already exists
	'-------------------------------------------------
	If FileExists(sQueryName) Then
		Kill sQueryName
	End If

	'-------------------------------------------------
	' Open the query file for output
	'-------------------------------------------------
	Open File sQueryName For Append As #5

	'-------------------------------------------------
	' Replace any CR characters with '$$' before saving
	'-------------------------------------------------
	Dim sFields, sWhere, sGroup, sOrder As String
	sFields = StringReplace(ReadControlValue(1), chr$(10), "$$")
	sWhere = StringReplace(ReadControlValue(2), chr$(10), "$$")
	sGroup = StringReplace(ReadControlValue(3), chr$(10), "$$")
	sOrder = StringReplace(ReadControlValue(4), chr$(10), "$$")

	'-------------------------------------------------
	' Save the query details to the query file
	'-------------------------------------------------
	Print #5, "Fields {" + sFields + "}"
	Print #5, "Where {" + sWhere + "}"
	Print #5, "Group By {" + sGroup + "}"
	Print #5, "Order By {" + sOrder + "}"

	'-------------------------------------------------
	' Close the query file
	'-------------------------------------------------
	Close File #5

	'-------------------------------------------------
	' Store the name of the query file
	'-------------------------------------------------
	sCurrentQueryName = sQueryName

End Sub

Sub LoadQuery
'***************************************************************
'* Load an existing query details from a text file
'***************************************************************

	'-------------------------------------------------
	' Prompt the user for the query file location
	'-------------------------------------------------
	Dim sQueryFile As String
	sQueryFile = FileOpenDlg(sDefaultQueryPath, "", "qsf", "Select which query to load")
	if sQueryFile = "" then
		Note "No query file selected - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected query file
	'-------------------------------------------------
	Dim sQueryPath, sQueryName As String
	sQueryPath = PathToDirectory$(sQueryFile)
	sQueryName = PathToFileName$(sQueryFile)

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sQueryPath)
	if iSuccess = 0 Then
		Note "Query folder does not exist - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sQueryName, 3)) <> UCase$("QSF") Then
		Note "Query file has incorrect extension - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the query file exists
	'-------------------------------------------------
	If Not FileExists(sQueryName) Then
		Note "Query file not found - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Open the query file for input
	'-------------------------------------------------
	Open File sQueryName For Input As #6

	'-------------------------------------------------
	' Get the first line
	'-------------------------------------------------
	Dim sLine As String
	Line Input #6, sLine

	'-------------------------------------------------
	' Loop through all the lines until the file
	' is empty
	'-------------------------------------------------
	Dim sFieldsText, sWhereText, sGroupText, sOrderText As String
	Do Until EOF(6)

		'-------------------------------------------------
		' Store the line in the relevant string
		'-------------------------------------------------
		If UCase$(Left$(sLine, 8)) = "FIELDS {" Then
			sFieldsText = Mid$(sLine, 9, Len(sLine) - 9)
		End if

		If UCase$(Left$(sLine, 7)) = "WHERE {" Then
			sWhereText = Mid$(sLine, 8, Len(sLine) - 8)
		End if

		If UCase$(Left$(sLine, 10)) = "GROUP BY {" Then
			sGroupText = Mid$(sLine, 11, Len(sLine) - 11)
		End if

		If UCase$(Left$(sLine, 10)) = "ORDER BY {" Then
			sOrderText = Mid$(sLine, 11, Len(sLine) - 11)
		End if

		'-------------------------------------------------
		' Get the next line
		'-------------------------------------------------
		Line Input #6, sLine

	Loop

	'-------------------------------------------------
	' Close the query file
	'-------------------------------------------------
	Close File #6

	'-------------------------------------------------
	' Replace any '$$' characters with CR before loading
	' into the form
	'-------------------------------------------------
	Dim sFields, sWhere, sGroup, sOrder As String
	sFields = StringReplace(sFieldsText, "$$", chr$(10))
	sWhere = StringReplace(sWhereText, "$$", chr$(10))
	sGroup = StringReplace(sGroupText, "$$", chr$(10))
	sOrder = StringReplace(sOrderText, "$$", chr$(10))

	'-------------------------------------------------
	' Load the query details to the form
	'-------------------------------------------------
	Alter Control 1 Value sFields
	Alter Control 2 Value sWhere
	Alter Control 3 Value sGroup
	Alter Control 4 Value sOrder

	'-------------------------------------------------
	' Store the name of the query file
	'-------------------------------------------------
	sCurrentQueryName = sQueryName

End Sub

Sub CheckSelection
'***************************************************************
'* Check the user's selections and process according
'***************************************************************

	'-------------------------------------------------
	' Store the dialog variables
	'-------------------------------------------------
	sColumnNames = ReadControlValue(1)
	sWhereClause = ReadControlValue(2)
	sGroupClause = ReadControlValue(3)
	sOrderClause = ReadControlValue(4)
	iSQLTable = ReadControlValue(5)
	iOutputFormat = ReadControlValue(6)
	bClearLog = ReadControlValue(8)
	bPlotSpatialData = ReadControlValue(12)
	iXColumn = ReadControlValue(22)
	iYColumn = ReadControlValue(24)
	iSizeColumn = ReadControlValue(26)
	sMaxPointsPrecision = ReadControlValue(28)
	iSymbologySet = ReadControlValue(31)
	bDeletePlotColumns = ReadControlValue(40)

	'-------------------------------------------------
	' Don't plot records for non-spatial output formats
	'-------------------------------------------------
	If iOutputFormat > 2 Then
		bPlotSpatialData = False
	End If

	'-------------------------------------------------
	' Check if the user has selected at least one table
	' from the species table list
	'-------------------------------------------------
	if iSQLTable = 0 then
		Note "No table has been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has entered a valid maximum
	' points precision value
	'-------------------------------------------------
	If bPlotSpatialData = True
	And sMaxPointsPrecision <> str$(val(sMaxPointsPrecision)) Then
		Note "Max points precision must be numeric!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Clear the log file
	'-------------------------------------------------
	If bClearLog = True Then
		If FileExists(sLogFileName) Then
			Kill sLogFileName
		End If
	End If

	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process started!")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("")

	'-------------------------------------------------
	' Process the selection
	'-------------------------------------------------
	Call ProcessSelection

End Sub

Sub SetSpatialColumns
'***************************************************************
'* Set the spatial column popup lists based on the selected
'* table name.
'***************************************************************

	'-------------------------------------------------
	' Check what format the user has selected for
	' the SQL table.
	'-------------------------------------------------
	Dim iSQLTable As Integer
	iSQLTable = ReadControlValue(5)

	'-------------------------------------------------
	' Check what format the user has selected for
	' the output file.
	'-------------------------------------------------
	Dim iFileFormat As Integer
	iFileFormat = ReadControlValue(6)

	'-------------------------------------------------
	' Check if the user has ticked the plot data
	' spatially checkbox.
	'-------------------------------------------------
	Dim iPlotData As Integer
	iPlotData = ReadControlValue(12)

	'-------------------------------------------------
	' Check if the user has selected at least one table
	' from the table list
	'-------------------------------------------------
	If iSQLTable = 0 then
	
		'-------------------------------------------------
		' If the user has ticked the plot data spatially
		' checkbox then clear the column names.
		'-------------------------------------------------
		If iPlotData = 1 then
			If iFileFormat = 1 Or iFileFormat = 2 then
				If bEnablePlotting = True then
					Alter Control 22 Title ""
					Alter Control 24 Title ""
					Alter Control 26 Title ""
				End If
			End If
		End If

		Exit Sub

	End If

	Dim sTableName As String, sSQLColumns As String
	sTableName = aSQLTables(iSQLTable)

	'-------------------------------------------------
	' Query all the columns in the table
	'-------------------------------------------------
	Dim nStmt as Integer
	Dim sColumnListSQL As String
	sColumnListSQL = "Select column_name From information_schema.columns Where table_name = '" + sTableName + "' And table_schema = '" + sDefaultSchema + "' Order By ORDINAL_POSITION"
	nStmt = Server_Execute(nConn, sColumnListSQL)

	'-------------------------------------------------
	' Bind to the 1st column of the results
	'-------------------------------------------------
	Dim sSQLColumn As String
	Dim iStatus As Integer
	Server nStmt Bind Column 1 To sSQLColumn, iStatus
	Server nStmt Fetch Next

	'-------------------------------------------------
	' Loop through all the columns matching the
	' SQL criteria and add them to the columns list
	'-------------------------------------------------
	Dim i as integer
	i = 1
	While Not Server_Eot(nStmt)

		'-------------------------------------------------
		' Concatenate all the columns into an array
		' and a string (except the 'MI_STYLE' and
		' 'MI_PRINX' columns
		'-------------------------------------------------
		Redim aSQLColumns(i)
		aSQLColumns(i) = sSQLColumn
		If sSQLColumn <> "MI_STYLE" And sSQLColumn <> "MI_PRINX" Then
			If sSQLColumns = "" Then
				sSQLColumns = sSQLColumn
			Else
				sSQLColumns = sSQLColumns + ", " + sSQLColumn
			End If
		End If
		Server nStmt Fetch Next
		i = i + 1

	Wend

	'-------------------------------------------------
	' Close the query results
	'-------------------------------------------------
	Server nStmt Close

	'-------------------------------------------------
	' If the list is double-clicked then paste all
	' the column names into the columns box.
	'-------------------------------------------------
	If CommandInfo(CMD_INFO_DLG_DBL) Then
		'-------------------------------------------------
		' Read the existing columns clause
		'-------------------------------------------------
		Dim sFields As String
		sFields = ReadControlValue(1)
		If sFields <> "" Then
			'-------------------------------------------------
			' Ask the user if they want to overwrite the
			' existing columns clause
			'-------------------------------------------------
			Dim lResponse As Logical
			lResponse = Ask("Overwrite existing columns clause with list of columns?", "Yes", "No")
		
			If lResponse = False Then
				Exit Sub
			End If
		End If

		'-------------------------------------------------
		' Update the columns clause in the form
		'-------------------------------------------------
		Alter Control 1 Value sSQLColumns
		Exit Sub

	End If

	'-------------------------------------------------
	' If the user has ticked the plot data spatially
	' checkbox.
	'-------------------------------------------------
	If iPlotData = 1 then
		'-------------------------------------------------
		' Update the spatial column popup lists to
		' show the column names
		'-------------------------------------------------
		If iFileFormat = 1 Or iFileFormat = 2 then
			If bEnablePlotting = True then
				Alter Control 22 Title FROM Variable aSQLColumns
				Alter Control 24 Title FROM Variable aSQLColumns
				Alter Control 26 Title FROM Variable aSQLColumns
			End If
		End If

		'-------------------------------------------------
		' Try and set the default values
		'-------------------------------------------------
		Dim j as integer
		j = 1
		Do While j < i
			If aSQLColumns(j) = sXColumn Then
				Alter Control 22 Value j
			End If
	
			If aSQLColumns(j) = sYColumn Then
				Alter Control 24 Value j
			End If
	
			If aSQLColumns(j) = sSizeColumn Then
				Alter Control 26 Value j
			End If
	
			j = j + 1
		Loop

	End If

End Sub

Sub SetFileFormat
'***************************************************************
'* Show or hide the symbology set dropdown and spatially
'* plotting fields depending upon the selected file format.
'***************************************************************

	'-------------------------------------------------
	' Check what format the user has selected for
	' the output file.
	'-------------------------------------------------
	Dim iFileFormat As Integer
	iFileFormat = ReadControlValue(6)

	'-------------------------------------------------
	' Check if the user has ticked the plot data
	' spatially checkbox.
	'-------------------------------------------------
	Dim iPlotData As Integer
	iPlotData = ReadControlValue(12)

	'-------------------------------------------------
	' If a .tab file is selected then show the
	' set default symbology checkbox
	'-------------------------------------------------
	If iFileFormat = 1 then
		Alter Control 30 Show
		Alter Control 31 Show
	Else
		Alter Control 30 Hide
		Alter Control 31 Hide
	End If

	'-------------------------------------------------
	' If a .tab file or .shp file is selected then
	' show the plot data spatially
	'-------------------------------------------------
	If iFileFormat = 1 Or iFileFormat = 2 then
		'-------------------------------------------------
		' If spatial plotting is allowed in the
		' configuration file.
		'-------------------------------------------------
		If bEnablePlotting = True then
			'-------------------------------------------------
			' If the user has ticked the plot data spatially
			' checkbox then clear the column names.
			'-------------------------------------------------
			If iPlotData = 1 then
				Alter Control 12 Show
				Alter Control 20 Show
				Alter Control 21 Show
				Alter Control 22 Show
				Alter Control 23 Show
				Alter Control 24 Show
				Alter Control 25 Show
				Alter Control 26 Show
				Alter Control 27 Show
				Alter Control 28 Show
				Alter Control 40 Show
			End If
		End If
	Else
		Alter Control 12 Hide
		Alter Control 20 Hide
		Alter Control 21 Hide
		Alter Control 22 Hide
		Alter Control 23 Hide
		Alter Control 24 Hide
		Alter Control 25 Hide
		Alter Control 26 Hide
		Alter Control 27 Hide
		Alter Control 28 Hide
		Alter Control 40 Hide
	End If

End Sub

Sub SetPlotData
'***************************************************************
'* Show or hide the max points precision textbox depending
'* if the plot data spatially checkbox value.
'***************************************************************

	'-------------------------------------------------
	' Check if the user has ticked the plot data
	' spatially checkbox.
	'-------------------------------------------------
	Dim iPlotData As Integer
	iPlotData = ReadControlValue(12)
	If iPlotData = 1 then
		Alter Control 20 Show
		Alter Control 21 Show
		Alter Control 22 Show
		Alter Control 23 Show
		Alter Control 24 Show
		Alter Control 25 Show
		Alter Control 26 Show
		Alter Control 27 Show
		Alter Control 28 Show
		Alter Control 40 Show
	Else
		Alter Control 20 Hide
		Alter Control 21 Hide
		Alter Control 22 Hide
		Alter Control 23 Hide
		Alter Control 24 Hide
		Alter Control 25 Hide
		Alter Control 26 Hide
		Alter Control 27 Hide
		Alter Control 28 Hide
		Alter Control 40 Hide
	End If

	'-------------------------------------------------
	' Set the default maximum point precision
	'-------------------------------------------------
	If iPlotData = 1 then
		Dim sPointsPrecision As String
		sPointsPrecision = ReadControlValue(28)
		If sPointsPrecision = "" Then
			Alter Control 28 Value Str$(val(sDefaultPointPrecision))
		End If
	End If

	'-------------------------------------------------
	' Set the spatial column popup lists based on any
	' selected table name.
	'-------------------------------------------------
	If iPlotData = 1 then
		Call SetSpatialColumns
	End If

End Sub

Sub ProcessSelection
'***************************************************************
'* Process the table selection
'***************************************************************

	Dim sTableName As String
	sTableName = aSQLTables(iSQLTable)

	Call MyPrint ("Table Name = '" + sTableName + "'")

	Do Case iOutputFormat
		Case 1
			sOutputFormat = "tab"
			Call MyPrint("Output Format = '.tab'")
		Case 2
			sOutputFormat = "shp"
			Call MyPrint("Output Format = '.shp'")
		Case 3
			sOutputFormat = "csv"
			Call MyPrint("Output Format = '.csv'")
		Case 4
			sOutputFormat = "txt"
			Call MyPrint("Output Format = '.txt'")
		Case Else
			sOutputFormat = "tab"
			Call MyPrint("Output Format = '.tab'")
	End Case

	Dim sDefaultFile as string
	sDefaultFile = ""

	'-------------------------------------------------
	' Prompt the user for the output file destination
	'-------------------------------------------------
GetFileName:
	sOutputFile = FileSaveAsDlg(sDefaultExtractPath, sDefaultFile, sOutputFormat, "Select where to save the output file")

	'-------------------------------------------------
	' Check the user has selected an output file
	'-------------------------------------------------
	if sOutputFile = "" then
		Call MyPrint("No output file selected - selection cancelled.")
		Note "No output file selected - selection cancelled."
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected output file
	'-------------------------------------------------
	Dim sOutputPath, sOutputName As String
	sOutputPath = PathToDirectory$(sOutputFile)
	sOutputName = PathToFileName$(sOutputFile)

	'-------------------------------------------------
	' Check the output file starts with a character
	'-------------------------------------------------
	Dim iChar As Integer
	Dim bChar As Logical

	iChar = Asc(Left$(sOutputName, 1))
	If (iChar > 64 And iChar < 91) Or (iChar > 96 And iChar < 123) Then
		bChar = True
	Else
		bChar = False
	End If

	If bChar = False Then
		Note "The first character in the output file name must be alphabetic."
		sDefaultFile = sOutputName
		Goto GetFileName
	End If

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sOutputPath)
	if iSuccess = 0 Then
		Call MyPrint("Output folder does not exist - selection cancelled.")
		Note "Output folder does not exist - selection cancelled."
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sOutputName, 3)) <> UCase$(sOutputFormat) Then
		Call MyPrint("Output file has incorrect extension - selection cancelled.")
		Note "Output file has incorrect extension - selection cancelled."
		Exit Sub
	End If

	'-------------------------------------------------
	' Remove the file extension from the output file name
	'-------------------------------------------------
	sOutputName = Left$(sOutputName, Len(sOutputName) - 4)

	Call MyPrint("Output File = '" + sOutputFile + "'")

	'-------------------------------------------------
	' Call the subroutine to select the records from
	' the selected table using the user's where clause
	'-------------------------------------------------
	Call SelectSpecies(nConn, sColumnNames, sWhereClause, sGroupClause, sOrderClause, sOutputPath, sOutputName, sTableName)

	Call MyPrint("")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process completed!")
	Call MyPrint("----------------------------------------------------------------------")

	'-------------------------------------------------
	' Ask the user if they want to close the form
	'-------------------------------------------------
	Dim lResponse As Logical
	lResponse = Ask("Processing complete!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")

	If lResponse = True Then
		'-------------------------------------------------
		' Close the dialog
		'-------------------------------------------------
		Dialog Remove
	End If

	'-------------------------------------------------
	' Display the log file in the message window
	'-------------------------------------------------
	Call PrintLogFile

End Sub

Sub SelectSpecies (ByVal nConn As Integer,
	sColumnNames As String,
	sWhereClause As String,
	sGroupClause As String,
	sOrderClause As String,
	sOutputPath As String,
	sOutputName As String,
	sTableName As String)
'*************************************************
'* Routine to select the species records from
'* the table name passed in the call where the
'* attributes meet the where clause also passed
'* in the call.
'*************************************************

	Dim sCmd As String

	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Replace any spaces in the table name with
	' underscores and remove hyphens
	'-------------------------------------------------
	Dim sShortName As String
	sShortName = StringReplace(sOutputName, " ", "_")
	sShortName = StringReplace(sShortName, "-", "")

	'-------------------------------------------------
	' Get the current user ID
	'-------------------------------------------------
	Dim sUser As String
	sUser = sUserID

	'-------------------------------------------------
	' Truncate the user ID if it will make the
	' temporary SQL table name too long
	'-------------------------------------------------
	If Len(sTableName + "_" + sUser) > 32 Then
		sUser = Left$(sUser, Maximum(31 - Len(sTableName), 0))
	End If

	'-------------------------------------------------
	' Setup the temporary and local table names
	'-------------------------------------------------
	Dim sTempName As String
	sTempName = sTableName + "_" + sUser
	Call MyPrint("Selecting from table = '" + sTableName + "' ...")

	'-------------------------------------------------
	' Replace single quotes with two single quotes
	' in all SQL clauses
	'-------------------------------------------------
	sColumnNames = StringReplace(sColumnNames, "'", "''")
	sWhereClause = StringReplace(sWhereClause, "'", "''")
	sGroupClause = StringReplace(sGroupClause, "'", "''")
	sOrderClause = StringReplace(sOrderClause, "'", "''")

	'-------------------------------------------------
	' Execute a SQL Server stored procedure to select
	' the species records based on the where clause,
	' group by and order by
	'-------------------------------------------------
	Dim nStmt1 As Integer
	nStmt1 = Server_Execute(nConn, "EXECUTE " + sDefaultSchema + ".AFSelectSppSubset '"
	 + sDefaultSchema + "', '" + sTableName + "', '" + sColumnNames + "', '"
	 + sWhereClause + "', '" + sGroupClause + "', '" + sOrderClause + "', '"
	 + sUser + "', 0")

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt1 Close

	'-------------------------------------------------
	' Count the number of species records that have
	' been selected in the subset temporary table
	'-------------------------------------------------
	Dim nStmt2 As Integer
	Dim iRecTotal As Integer
	Dim iRecStatus As Integer
	nStmt2 = Server_Execute(nConn, "Select Count(*) As Records From " + sDefaultSchema + "." + sTempName)
	Server nStmt2 Bind Column 1 To iRecTotal, iRecStatus
	Server nStmt2 Fetch Next

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt2 Close

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("No records found - selection cancelled.")
		Note "No records found - selection cancelled."
		Exit Sub
	End If

	Call MyPrint("" + FormatNumber$(iRecTotal) + " records selected.")

	'-------------------------------------------------
	' Check if the maximum number of records will be
	' exceeded
	'-------------------------------------------------
	If iRecTotal > iRecMax Then
		Call MyPrint("Record count exceeds maximum of " + iRecMax + " - selection cancelled.")
		Note "Record count exceeds maximum of " + iRecMax + " - selection cancelled."
		Exit Sub
	End If

	'-------------------------------------------------
	' Close the temporary table if already/still open
	' in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen(sTempName) Then
		Call MyPrint("Closing the temporary table ...")
		Close Table sTempName
	End If

	'-------------------------------------------------
	' Check if the local table is already/still open
	' and close it if it is
	'-------------------------------------------------
	Dim sOpenTableName As String
	sOpenTableName = TabFileIsOpen(sOutputPath + sOutputName + ".TAB")
	If sOpenTableName <> "" Then
		Call MyPrint("Closing local table ...")
		Close Table sOpenTableName
	End If

	Call MyPrint("Saving into '" + sOutputName + "' ...")

	'-------------------------------------------------
	' Set up the SQL statement for creating an empty
	' temporary table (to check the record length).
	'-------------------------------------------------
	Dim sSQLStmt As String
	sSQLStmt = "Select * From " + sDefaultSchema + "." + sTempName + " WHERE NULL = NULL"

	'-------------------------------------------------
	' Link the temporary table as a local table
	'-------------------------------------------------
	Call MyPrint("Linking dummy table ...")
	Server nConn Link Table
	sSQLStmt
	Toolkit "ODBC"
	Into sShortName
	File sOutputPath + sOutputName
	Autokey Off
	ReadOnly

	'-------------------------------------------------
	' Get the table name alias of the new table
	'-------------------------------------------------
	Dim sTableAlias As String
	sTableAlias = TableInfo(0, TAB_INFO_NAME)

	'-------------------------------------------------
	' Unlink the temporary table to leave the local
	' table as a regular standalone table
	'-------------------------------------------------
	Call MyPrint("Unlinking dummy table ...")
	Unlink sTableAlias

	'-------------------------------------------------
	' Check if the maximum record length will be exceeded
	'-------------------------------------------------
	Dim iRowLength As Integer
	iRowLength = GetRowLength(sTableAlias)
	If iRowLength > 4096 Then

		Call MyPrint("Record length exceeds maximum of 4,096 bytes - selection cancelled.")
		Note "Record length exceeds maximum of 4,096 bytes - selection cancelled."

		'-------------------------------------------------
		' Drop the local table
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping local table ...")
			Drop Table sTableAlias
		End If

		Exit Sub

	Else
		Call MyPrint("Total record length = " + FormatNumber$(iRowLength) + " bytes.")
	End If

	'-------------------------------------------------
	' Display the total data size
	'-------------------------------------------------
	Dim iDataSize As Integer
	iDataSize = ((iRowLength * iRecTotal) / 1024) + 1

	If iDataSize > (1024 * 1024) Then
		Call MyPrint("Total data size = " + FormatNumber$(iDataSize) + " Kb (" + FormatNumber$(Round(iDataSize / (1024 * 1024), 0.01)) + " Gb).")
	Else
		If iDataSize > 1024 Then
			Call MyPrint("Total data size = " + FormatNumber$(iDataSize) + " Kb (" + FormatNumber$(Round(iDataSize / 1024, 0.01)) + " Mb).")
		Else
			Call MyPrint("Total data size = " + FormatNumber$(iDataSize) + " Kb.")
		End If
	End If

	'-------------------------------------------------
	' Check if the total data size will be exceeded
	'-------------------------------------------------
	If iDataSize > (2*1024*1024) Then

		Call MyPrint("Total data size exceeds maximum of 2 Gb - selection cancelled.")
		Note "Total data size exceeds maximum of 2 Gb - selection cancelled."

		'-------------------------------------------------
		' Drop the local table
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping local table ...")
			Drop Table sTableAlias
		End If

		Exit Sub

	End If

	'-------------------------------------------------
	' Close the dummy table
	'-------------------------------------------------
	If TableIsOpen(sTableAlias) Then
		Call MyPrint("Closing the dummy table ...")
		Close Table sTableAlias
	End If

	sSQLStmt = "Select * From " + sDefaultSchema + "." + sTempName

	'-------------------------------------------------
	' Link the temporary table as a local table
	'-------------------------------------------------
	Call MyPrint("Linking local table ...")
	Server nConn Link Table
	sSQLStmt
	Toolkit "ODBC"
	Into sShortName
	File sOutputPath + sOutputName
	Autokey Off
	ReadOnly

	'-------------------------------------------------
	' Get the table name alias of the new table
	'-------------------------------------------------
	sTableAlias = TableInfo(0, TAB_INFO_NAME)

	'-------------------------------------------------
	' Unlink the temporary table to leave the local
	' table as a regular standalone table
	'-------------------------------------------------
	Call MyPrint("Unlinking local table ...")
	Unlink sTableAlias

	'-------------------------------------------------
	' Check if the table contains an Obj column
	' which indicates if there is any spatial data
	'-------------------------------------------------
	Dim bSpatialData As Logical
	'If ColumnExists(sTableAlias, "Obj") Then
	If TableInfo(sTableAlias, TAB_INFO_MAPPABLE) Then
		Call MyPrint("Table contains spatial data.")
		bSpatialData = True
	Else
		Call MyPrint("Table does not contain spatial data.")
		bSpatialData = False
	End If

	'-------------------------------------------------
	' Execute a SQL Server stored procedure to delete
	' the species records temporary table
	'-------------------------------------------------
	Dim nStmt3 As Integer
	Call MyPrint("Deleting temporary table ...")
	nStmt3 = Server_Execute(nConn, "EXECUTE " + sDefaultSchema + ".AFClearSppSubset '" + sDefaultSchema
	 + "', '" + sTableName + "', '" + sUser + "'")

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt3 Close

	Set ProgressBars Off

	If ColumnExists(sTableAlias, "MI_STYLE") Or
	   ColumnExists(sTableAlias, "MI_PRINX") Or
	   ColumnExists(sTableAlias, "MI_SQL_REC_NUM") Then
		Call MyPrint("Dropping unwanted columns ...")
	End If

	'-------------------------------------------------
	' If the local table contains a MI_STYLE
	' column then delete the column
	'-------------------------------------------------
	Dim sDropColumns As String
	sDropColumns = ""
	If ColumnExists(sTableAlias, "MI_STYLE") Then
		Alter Table sTableAlias (Drop MI_STYLE)
	End If

	'-------------------------------------------------
	' If the local table contains a MI_PRINX
	' column then delete the column
	'-------------------------------------------------
	If ColumnExists(sTableAlias, "MI_PRINX") Then
		Alter Table sTableAlias (Drop MI_PRINX)
	End If

	'-------------------------------------------------
	' If the local table contains a MI_SQL_REC_NUM
	' column then delete the column
	'-------------------------------------------------
	If ColumnExists(sTableAlias, "MI_SQL_REC_NUM") Then
		Alter Table sTableAlias (Drop MI_SQL_REC_NUM)
	End If

	Set ProgressBars On

	'-------------------------------------------------
	' Export the table as a CSV if required
	'-------------------------------------------------
	If iOutputFormat = 3 Then
		Call MyPrint("Exporting as a CSV file ...")

		Set ProgressBars Off

		Export sTableAlias
			Into sOutputPath + sOutputName + ".csv"
			Type "CSV"
			Titles
			Overwrite

		Set ProgressBars On

	End If

	'-------------------------------------------------
	' Export the table as a TXT if required
	'-------------------------------------------------
	If iOutputFormat = 4 Then
		Call MyPrint("Exporting as a TXT file ...")

		Set ProgressBars Off

		Export sTableAlias
			Into sOutputPath + sOutputName + ".txt"
			Type "ASCII"
			CharSet "WindowsLatin1"
			Titles
			Overwrite

		Set ProgressBars On

	End If

	Dim sXCol As String, sYCol As String, sSizeCol As String

	'-------------------------------------------------
	' If the data is to be plotted spatially
	'-------------------------------------------------
	If bPlotSpatialData = True Then

		Call MyPrint("Plotting local table ...")

		'-------------------------------------------------
		' Get the names of the spatial columns to use
		'-------------------------------------------------
		sXCol = aSQLColumns(iXColumn)
		sYCol = aSQLColumns(iYColumn)
		sSizeCol = aSQLColumns(iSizeColumn)

		'-------------------------------------------------
		' Check the local table contains the required
		' columns
		'-------------------------------------------------
		If ColumnExists(sTableAlias, sXCol) And
		   ColumnExists(sTableAlias, sYCol) And
		   ColumnExists(sTableAlias, sSizeCol) Then

			'-------------------------------------------------
			' If the local table doesn't contain an Obj
			' column then add the column
			'-------------------------------------------------
			If Not ColumnExists(sTableAlias, "Obj") Then
				Call MyPrint("Adding map object to local table ...")


				sCmd = "Create Map For " + sTableAlias + " CoordSys " + sCoordSys
				Run Command (sCmd)
			End If

			'-------------------------------------------------
			' Turn on FastEdit to speed up the updates
			'-------------------------------------------------
			Set Table sTableAlias FastEdit On

			'-------------------------------------------------
			' Plot the records as points or polygons based
			' on the maximum points precision value
			'-------------------------------------------------
			Dim iMaxPointSize As Integer
			iMaxPointSize = val(sMaxPointsPrecision)

			Set ProgressBars Off

			Call PlotSpatialData(sTableAlias, iMaxPointSize,
				sXCol, sYCol, sSizeCol)


			Set ProgressBars On

			'-------------------------------------------------
			' Turn off FastEdit after updates
			'-------------------------------------------------
			Set Table sTableAlias FastEdit Off

			'-------------------------------------------------
			' Flag that the data is now spatial
			'-------------------------------------------------
			bSpatialData = True

		Else
	
			Call MyPrint("Table does not contain required columns - plotting cancelled.")
			Note "Table does not contain required columns - plotting cancelled."

			'-------------------------------------------------
			' Flag that the data is not spatial
			'-------------------------------------------------
			bSpatialData = False

		End If

	Else

		'-------------------------------------------------
		' Set size column to the default column name
		'-------------------------------------------------
		sSizeCol = sSizeColumn

	End If

	'-------------------------------------------------
	' Translate the table to ESRI shapefile if required
	'-------------------------------------------------
	If iOutputFormat = 2 Then
		Dim sLogFilePath As String
		sLogFilePath = PathToDirectory$(sLogFileName)

		Call MyPrint("Log File Path = '" + sLogFilePath + "'")

		Call TranslateToShapefile(sLogFilePath, sTempName, sOutputPath, sOutputName)
	End If

	'-------------------------------------------------
	' If a MapInfo table is required
	'-------------------------------------------------
	If iOutputFormat = 1 Then

		'-------------------------------------------------
		' Check if the local table is mappable (i.e.
		' contains the 'OBJ' graphics column) and the
		' graphics column contains spatial data
		'-------------------------------------------------
		If TableInfo(sTableAlias, TAB_INFO_MAPPABLE)
		And bSpatialData = True Then

			'-------------------------------------------------
			' If the symbology is to be set and the table is
			' open
			'-------------------------------------------------
			If iSymbologySet > 1
			And TableIsOpen(sTableAlias) Then

				Call MyPrint("Setting symbology in table ...")

				Set ProgressBars Off

				'-------------------------------------------------
				' Add an index to the precision field to speed
				' up the symbology setting
				'-------------------------------------------------
				'Create Index On sTableAlias(sSizeCol)

				'-------------------------------------------------
				' Turn on FastEdit to speed up the updates
				'-------------------------------------------------
				Set Table sTableAlias FastEdit On

				'-------------------------------------------------
				' Set the symbology for the table
				'-------------------------------------------------
				Dim sNodeName As String
				sNodeName = aSymbolNodes(iSymbologySet)
				Call SetSymbology(sNodeName, sTableAlias)

				'-------------------------------------------------
				' Turn off FastEdit after updates
				'-------------------------------------------------
				Set Table sTableAlias FastEdit Off

				Set ProgressBars On

			End If

			'-------------------------------------------------
			' If the data was plotted spatially and the
			' columns used are to be deleted afterwards
			' then delete them now
			'-------------------------------------------------
			If bDeletePlotColumns = True Then
		
				Call MyPrint("Deleting columns used for plotting ...")
		
				'-------------------------------------------------
				' Check the local table contains the required
				' columns
				'-------------------------------------------------
				sDropColumns = ""
				If ColumnExists(sTableAlias, sXCol) Then
					sDropColumns = sXCol
				End If
				
				If ColumnExists(sTableAlias, sYCol) Then
					If sDropColumns = "" Then
						sDropColumns = sYCol
					Else
						sDropColumns = sDropColumns + ", " + sYCol
					End If
				End If
				   
				If ColumnExists(sTableAlias, sSizeCol) Then
					If sDropColumns = "" Then
						sDropColumns = sSizeCol
					Else
						sDropColumns = sDropColumns + ", " + sSizeCol
					End If
				End If
		
				'-------------------------------------------------
				' Drop the unwanted columns
				'-------------------------------------------------
				If sDropColumns <> "" Then
					Set ProgressBars Off
		
					sCmd = "Alter Table " + sTableAlias + "(Drop " + sDropColumns + ")"
					Run Command (sCmd)
		
					Set ProgressBars On
				End If
		
			End If
		
	 		'-------------------------------------------------
			' Add the table to the top most map window (if
			' there is one), otherwise create a new map
			' window using the table.
			'-------------------------------------------------
			If NumWindows() > 0 Then
				Dim iWin as Integer
				iWin = FrontWindow()
				If WindowInfo(iWin, WIN_INFO_TYPE) = WIN_MAPPER Then
					Call MyPrint("Adding table to map window ...")
					Add Map Layer sTableAlias
				Else
					Call MyPrint("Mapping table in map window ...")
					Map From sTableAlias
				End If
			Else
				Call MyPrint("Mapping table in map window ...")
				Map From sTableAlias
			End If

		Else

			Call MyPrint("Table does not have graphic information. Table not mapped.")

	 		'-------------------------------------------------
			' Opens the table in a browser window
			'-------------------------------------------------
			Call MyPrint("Opening table in browser window ...")
			Browse * From sTableAlias

		End If

		'-------------------------------------------------
		' Close the table
		'-------------------------------------------------
		'Call MyPrint("Closing the MapInfo table ...")
		'Close Table sTableAlias

	Else

		'-------------------------------------------------
		' If a MapInfo table is not required then
		' check if the local table is open and drop it
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping the MapInfo table ...")
			Drop Table sTableAlias
		End If

	End If

	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

End Sub

Sub PlotSpatialData
	(sTableName As String,
	iMaxPointSize As Integer,
	EastingCol As String,
	NorthingCol As String,
	PrecisionCol As String)
'***************************************************************
'* Plot the records as points or polygons based on the
'* maximum points precision value
'***************************************************************

	'-------------------------------------------------
	' Select the spatial columns so that the
	' objects can be plotted
	'-------------------------------------------------
	Dim sCmd As String
	sCmd = "Select " + EastingCol + ", " + NorthingCol + ", " + PrecisionCol + ", Obj, CentroidX(Obj), CentroidY(Obj) From " + sTableName + " Into NewObj NoSelect"
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of rows selected
	'-------------------------------------------------
	Dim iRows As Integer
	iRows = TableInfo(NewObj, TAB_INFO_NROWS)

	Call MyPrint("Plotting " + FormatNumber$(iRows) + " rows as points or polygons.")

	'-------------------------------------------------
	' If any rows were selected then set the object
	'-------------------------------------------------
	If iRows > 0 Then

		'-------------------------------------------------
		' Set the coordinate system to that of the table
		'-------------------------------------------------
		Set Coordsys table NewObj

		'-------------------------------------------------
		' Fetch the first of the selected rows
		'-------------------------------------------------
		Fetch First from NewObj

		'-------------------------------------------------
		' Loop through all the selected rows setting the
		' spatial object
		'-------------------------------------------------
		Dim iRow as Integer
		iRow = 1
		Do while iRow <= iRows

			Dim X, Y, Z as Integer
			Z = NewObj.col3
			X = int(NewObj.col1 / Z) * Z
			Y = int(NewObj.col2 / Z) * Z

			'-------------------------------------------------
			' Create a dummy object to plot
			'-------------------------------------------------
			Dim oUpdateObj as Object

			If Z <= iMaxPointSize Then

				'-------------------------------------------------
				' Create a point in the object
				'-------------------------------------------------
				Create Point Into Variable oUpdateObj ( X, Y )

			Else

				'-------------------------------------------------
				' Create a region in the object
				'-------------------------------------------------
				Dim pX(5), pY(5) As Integer
				Dim i As Integer
				pX(1) = X
				pY(1) = Y
				pX(2) = pX(1) + Z
				pY(2) = pY(1)
				pX(3) = pX(1) + Z
				pY(3) = pY(1) + Z
				pX(4) = pX(1)
				pY(4) = pY(1) + Z
				pX(5) = pX(1)
				pY(5) = pY(1)

				'-------------------------------------------------
				' Create an empty region object
				'-------------------------------------------------
				Create Region Into Variable oUpdateObj 0

				'-------------------------------------------------
				' Now add nodes to populate the object
				'-------------------------------------------------
				For i = 1 to 5
					Alter Object oUpdateObj Node Add ( pX(i), pY(i) )
				Next

			End If

			'-------------------------------------------------
			' Update the object in the table
			'-------------------------------------------------
			Update NewObj Set Obj = oUpdateObj Where RowID = iRow

			'-------------------------------------------------
			' Fetch the next of the selected rows
			'-------------------------------------------------
			Fetch next from NewObj
			iRow = iRow + 1

		Loop

		'-------------------------------------------------
		' Save the updates
		'-------------------------------------------------
		sCmd = "Commit Table NewObj"
		Run Command (sCmd)

	End If

CleanUp:
	'-------------------------------------------------
	' Close the temporary NewObjtable if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("NewObj") Then
		Close Table NewObj
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

End Sub

Sub SetSymbology(sNodeName as String, sLocalName As String)
'***************************************************************
'* Retrieve the symbology styles and clauses from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode

	Dim hXMLMapInfoTableNode As MIXmlNode
	Dim hXMLSymbolSetNode As MIXmlNode
	Dim hXMLSymbologyNode As MIXmlNode
	Dim hXMLSymbolNodeList As MIXMLNodeList
	Dim hXMLSymbolNode As MIXmlNode

	OnError Goto GetSymbologyError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + sXMLFile, bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSelector node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSelector")
	          	If hXMLNode Then
	
					'-------------------------------------------------
					' Get a handle on the MapInfoTables node
					'-------------------------------------------------
					hXMLMapInfoTableNode = MIXmlSelectSingleNode(hXMLNode, "MapInfoTables")

					'-------------------------------------------------
					' Get a handle on the required symbology set node
					'-------------------------------------------------
					hXMLSymbolSetNode = MIXmlSelectSingleNode(hXMLMapInfoTableNode, sNodeName)

					'-------------------------------------------------
					' Get a handle on the symbology node for the table
					'-------------------------------------------------
					hXMLSymbologyNode = MIXmlSelectSingleNode(hXMLSymbolSetNode, "Symbology")

					'-------------------------------------------------
					' Get a handle on the node map of the above node
					'-------------------------------------------------
					hXMLSymbolNodeList = MIXMLGetChildList(hXMLSymbologyNode)

					'-------------------------------------------------
					' Get a handle on the first attribute in the node list
					'-------------------------------------------------
					hXMLSymbolNode = MIXMLGetNextNode(hXMLSymbolNodeList)

					'-------------------------------------------------
					' Loop through all the attributes in the node list
					' applying the style using the SQL clauses
					'-------------------------------------------------
					Dim i As Integer
					i = 0
					Do while hXMLSymbolNode
						
						If i = 0 Then
							Call MyPrint("Setting symbology in table ...")
						End If

						'-------------------------------------------------
						' Close the temporary NewStyle table if it is
						' already/still open in the current MapInfo session
						'-------------------------------------------------
						If TableIsOpen("NewStyle") Then
							Close Table NewStyle
						End If

						i = i + 1

						'-------------------------------------------------
						' Set the SQL clause used to retrieve the
						' required rows from the MapInfo table
						'-------------------------------------------------
						Dim sClause As String
						sClause = GetSingleNodeValue(hXMLSymbolNode, "Clause")
						Dim sSQLClause As String
						sSQLClause = sClause
						If sSQLClause <> "" Then
							sSQLClause = " And (" & sSQLClause & ")"
						End If

						'-------------------------------------------------
						' Get the type of object (i.e. Point or Region)
						'-------------------------------------------------
						Dim sObject As String
						sObject = GetSingleNodeValue(hXMLSymbolNode, "Object")

						'-------------------------------------------------
						' Select all the rows of the desired object type
						' matching the required SQL clause
						'-------------------------------------------------
						Dim sCmd As String
						sCmd = "Select * From " + sLocalName + " Where Str$(obj) = """ + sObject + """ " + sSQLClause + " Into NewStyle NoSelect"
						Run Command (sCmd)

						'-------------------------------------------------
						' Count the number of rows selected
						'-------------------------------------------------
						Dim iRows As Integer
						iRows = TableInfo(NewStyle, TAB_INFO_NROWS)

						Call MyPrint("Setting " + sObject + " style for " + FormatNumber$(iRows) + " rows where ... " + sClause)

						'-------------------------------------------------
						' If any rows were selected then set the styles
						'-------------------------------------------------
						If iRows > 0 Then

							'-------------------------------------------------
							' Set the styles (depending on type of object)
							'-------------------------------------------------
							Dim sSymbol, sPen, sBrush As String

							Dim stlSymbol As Symbol
							Dim stlPen As Pen
							Dim stlBrush As Brush

							Do Case sObject
								Case "Point"
									sSymbol = GetSingleNodeValue(hXMLSymbolNode, "Symbol")
									stlSymbol = STLText2Symbol(sSymbol)
								Case "Region"
									sPen = GetSingleNodeValue(hXMLSymbolNode, "Pen")
									stlPen = STLText2Pen(sPen)
									sBrush = GetSingleNodeValue(hXMLSymbolNode, "Brush")
									stlBrush = STLText2Brush(sBrush)
								Case Else
							End Case

							'-------------------------------------------------
							' Alter the object style depending on the object
							' type and style type
							'-------------------------------------------------
							OnError Goto SetSymbologyError
							
							Do Case sObject
								Case "Point"
									Update NewStyle Set Obj = SetStylePoint(Obj, stlSymbol)
								Case "Region"
									Update NewStyle Set Obj = SetStylePolygon(Obj, stlPen, stlBrush)
								Case Else
							End Case

							OnError Goto GetSymbologyError

						End If

						'-------------------------------------------------
						' Get a handle on the next attribute in the node list
						'-------------------------------------------------
						hXMLSymbolNode = MIXMLGetNextNode(hXMLSymbolNodeList)

					Loop

					'-------------------------------------------------
					' Save the updates
					'-------------------------------------------------
					If TableIsOpen("NewStyle") Then
						sCmd = "Commit Table NewStyle"
						Run Command (sCmd)
					End If

					If i > 0 Then
						Call MyPrint("Symbology complete.")
					End If

				End If

			End If

		Else

			Note "Error : " + MIGetErrorMessage() + " - updating symbology in " + sLocalName
			Call MyPrint("Error: " + MIGetErrorMessage() + " - updating symbology")

		End If

	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLSymbolNode Then Call MIXmlNodeDestroy(hXMLSymbolNode) End If
	If hXMLSymbolNodeList Then Call MIXmlNodeListDestroy(hXMLSymbolNodeList) End If
	If hXMLSymbologyNode Then Call MIXmlNodeDestroy(hXMLSymbologyNode) End If
	If hXMLSymbolSetNode Then Call MIXmlNodeDestroy(hXMLSymbolSetNode) End If

	If hXMLMapInfoTableNode Then Call MIXmlNodeDestroy(hXMLMapInfoTableNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	'-------------------------------------------------
	' Close the temporary NewStyle table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("NewStyle") Then
		Close Table NewStyle
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

	Exit Sub

GetSymbologyError:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint("Error: " + str$(Err()) + " - " + Error$())
	Goto CleanUp
	Exit Sub

SetSymbologyError:
	Call MyPrint(str$(Err()) + ": " + Error$())
	Resume Next

End Sub

Function SetStylePoint(ByVal oObj As Object, ByVal stlSymbol As Symbol) As Object

	Alter Object oObj Info OBJ_INFO_SYMBOL, stlSymbol
	SetStylePoint = oObj

End Function

Function SetStylePolygon(ByVal oObj As Object, ByVal stlPen As Pen, ByVal stlBrush As Brush) As Object

	Alter Object oObj Info OBJ_INFO_PEN, stlPen
	Alter Object oObj Info OBJ_INFO_BRUSH, stlBrush
	SetStylePolygon = oObj

End Function

Sub AboutBox
'***************************************************************
'* Display the 'About' dialog box
'***************************************************************

	Dialog
		Title "About Data Selector " + sVersion
		Width 230
		Height 165

	Control StaticText
		Title "This program will select records from a SQL Server table"
		Position 10,10
	Control StaticText
		Title "based on the SQL statements entered by the user and will"
		Position 10,20
	Control StaticText
		Title "create a local MapInfo (.Tab) file, ESRI (.shp) file,"
		Position 10,30
	Control StaticText
		Title "Tab-Separated (.txt) file or Comma-Separated (.csv) file."
		Position 10,40
	Control StaticText
		Title "Created by Andy Foy Consulting."
		Position 10,60
	Control StaticText
		Title "Copyright© 2015-2019 GiGL, TVERC, SBIC."
		Position 10,70
	Control StaticText
		Title "Copyright© 2020-21 Andy Foy Consulting."
		Position 10,80
	Control StaticText
		Title "This tool was developed with funding from:"
		Position 10,100
	Control StaticText
		Title "  - Greenspace Information for Greater London CIC"
		Position 10,110
	Control StaticText
		Title "  - Thames Valley Environmental Records Centre"
		Position 10,120
	Control StaticText
		Title "  - Surrey Biodiversity Information Centre"
		Position 10,130
	Control OKButton
		Position 185,145

End Sub

Sub MyPrint(ByVal sMsg As String)
'***************************************************************
'* Bespoke print function
'***************************************************************

	'-------------------------------------------------
	' Open the log file for output
	'-------------------------------------------------
	Open File sLogFileName For Append As #1

	'-------------------------------------------------
	' Write the message passed to the output file
	'-------------------------------------------------
	Print #1, FormatDate$(CurDate()) + " " + FormatTime$(CurTime(),"H:mm:ss") + " : " + sMsg

	'-------------------------------------------------
	' Close the output file
	'-------------------------------------------------
	Close File #1

End Sub

Sub PrintLogFile()
'***************************************************************
'* Open the log file in Notepad
'***************************************************************

	'-------------------------------------------------
	' Open the log file in Notepad
	'-------------------------------------------------
	Dim sCmd As String
	sCmd = "Run Program " +  + Chr$(34) + "NotePad.exe " + sLogFileName + Chr$(34)
	Run Command (sCmd)

End Sub

Sub egsit
'***************************************************************
'* Exit the program
'***************************************************************

	End Program

End Sub
