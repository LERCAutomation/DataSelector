'* DataSelector is a MapBasic tool and associated SQL scripts to extract
'* biodiversity information from SQL Server based on any selection criteria.
'*
'* Copyright © 2015 Greenspace Information for Greater London (GiGL)
'* Copyright © 2015 Andy Foy Consulting
'* 
'* This file is part of the MapInfo tool 'DataSelector'.
'* 
'* DataSelector is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSelector is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSelector.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* DataSelector v1.03
'*
'* Creates a dialog window which lists the SQL species tables
'* in the remote SQL Server and allows the user to enter a
'* where clause and group by and order by text to select a
'* subset of the species records. It will then create a
'* MapInfo .tab file, ArcGIS .shp file or Text .csv file
'* of the selected records.
'*
'* Created:		Andy Foy - June 2015
'* Last revised:	Andy Foy - Sept 2015
'*
'* *****************  Version 1.03  *****************
'* Author: Andy Foy		Date: 08/09/2015
'* A. Added Group By and Order By fields in dialog.
'* B. Include Group By and Order By values in stored
'*    procedure.
'* C. Include Group By and Order By values when saving
'*    and loading to/from .qsf files.
'* D. Call new SQL stored procedures to create and
'*    clear selected subset tables.
'* E. Check if result contains spatial data and
'*    open in map or browser as applicable.
'* F. Remove default behaviour from 'Ok' button.
'* G. Added functionality to spatially plot points
'*    and polygons for non-spatial data.
'* H. Improved performance for setting symbology.
'* I. Display numbers with thousand separators in log.
'* 
'* *****************  Version 1.02  *****************
'* Author: Andy Foy		Date: 08/06/2015
'* A. Added userid to temporary SQL table name to enable
'*	concurrent use of tool.
'* 
'* *****************  Version 1.01  *****************
'* Author: Andy Foy		Date: 03/06/2015
'* A. Initial version of tool.
'* 
'***************************************************************
Include "DataSelector.def"

Sub Main
'***************************************************************
'* Main sub-routine
'***************************************************************

	'-------------------------------------------------
	' Create a new menu
	'-------------------------------------------------
	Create Menu "&Data Selector" As
	   "&Run Data Selector ..." Calling OpenDialog,
	   "(-",
	   "&About Data Selector ..." Calling AboutBox,
	   "E&xit Data Selector" Calling egsit

	'-------------------------------------------------
	' Add the new menu item to the Tools menu
	'-------------------------------------------------
	Alter Menu "Tools" Add
		"Data Selector" As "Data Selector"

	Exit Sub

End Sub

Sub GetDefaultValues
'***************************************************************
'* Retrieve all the default values from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode
	Dim hXMLSubNode As MIXmlNode
	Dim hXMLFilesNodeList As MIXMLNodeList
	Dim hXMLFilesNodeParent As MIXmlNode
	Dim hXMLFilesNode As MIXmlNode

	OnError Goto GetVariablesError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSelector.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataExtractor node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSelector")
	          If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataExtractor node
					'-------------------------------------------------
					' Log file for storing output messages
					sLogFileName = GetSingleNodeValue(hXMLNode, "LogFileName")

					' File DSN path and name containing remote SQL database connection settings
					sFileDSN = GetSingleNodeValue(hXMLNode, "FileDSN")

					' Default file path to store extracts
					sDefaultExtractPath = GetSingleNodeValue(hXMLNode, "DefaultExtractPath")

					' Default file path to save/load queries
					sDefaultQueryPath = GetSingleNodeValue(hXMLNode, "DefaultQueryPath")

					' Default database schema to use in the remote SQL database
					sDefaultSchema = GetSingleNodeValue(hXMLNode, "DatabaseSchema")

					' SQL used to list the names of species tables in the remote SQL database
					sTableListSQL = GetSingleNodeValue(hXMLNode, "TableListSQL")

					' Maximum number of records to be downloaded at one time
					iRecMax = GetSingleNodeValue(hXMLNode, "RecMax")

					' Default setting for the output file format
					sDefaultFormat = GetSingleNodeValue(hXMLNode, "DefaultFormat")

					' Default setting for setting the symbology
					sDefaultSetSymbology = GetSingleNodeValue(hXMLNode, "DefaultSetSymbology")

					' Whether the SQL database tables are spatially enabled
					Dim sTablesSpatial As String
					sTablesSpatial = GetSingleNodeValue(hXMLNode, "TablesSpatiallyEnabled")
					If UCase$(sTablesSpatial) = "Y" OR UCase$(sTablesSpatial) = "YES" Then
						bSpatialTables = True
					Else
						bSpatialTables = False
					End If

					'-------------------------------------------------
					' If the tables are not spatially enabled load
					' the spatial and precision column names used
					' to plot the data spatially
					'-------------------------------------------------
					If bSpatialTables = False Then

						' Default setting for setting the symbology
						sDefaultPointPrecision = GetSingleNodeValue(hXMLNode, "DefaultPointsPrecision")

						'-------------------------------------------------
						' Get a handle on the DataExtractor node
						'-------------------------------------------------
						hXMLSubNode = MIXmlSelectSingleNode(hXMLNode, "SpatialColumns")
			          If hXMLSubNode Then
	
							' Column name for the eastings value
							sEastingCol = GetSingleNodeValue(hXMLSubNode, "Easting")

							' Column name for the northings value
							sNorthingCol = GetSingleNodeValue(hXMLSubNode, "Northing")

							' Column name for the precision value
							sPrecisionCol = GetSingleNodeValue(hXMLSubNode, "Precision")

						End If

					End If
	
				End If

			End If

		Else

			Note "Error : " + MIGetErrorMessage()

		End If

	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLFilesNode Then Call MIXmlNodeDestroy(hXMLFilesNode) End If
	If hXMLFilesNodeList Then Call MIXmlNodeListDestroy(hXMLFilesNodeList) End If
	If hXMLFilesNodeParent Then Call MIXmlNodeDestroy(hXMLFilesNodeParent) End If
	If hXMLSubNode Then Call MIXmlNodeDestroy(hXMLSubNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetVariablesError:
	Note str$(Err()) + ": " + Error$()
	Exit Sub

End Sub

Sub OpenDialog
'***************************************************************
'* Create the user dialog window
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
    OnError Goto ErrorTrap

	'-------------------------------------------------
	' Retrieve the default values from the config file
	'-------------------------------------------------
	Call GetDefaultValues

	'-------------------------------------------------
	' Build a new dialog window
	'-------------------------------------------------
	Dialog
		Title "Data Extractor"
		Width 300
		Height 310
		Position 50,70
		Calling DialogSetup

	'-------------------------------------------------
	' Add a column names textbox
	'-------------------------------------------------
	Control StaticText
		Title "Columns:"
		Position 10,10
	Control EditText
		ID 1
		Position 10,20
		Height 80
		Width 170
		'Into sColumnNames

	'-------------------------------------------------
	' Add a where clause textbox
	'-------------------------------------------------
	Control StaticText
		Title "Where:"
		Position 10,110
	Control EditText
		ID 2
		Position 10,120
		Height 40
		Width 170
		'Into sWhereClause

	'-------------------------------------------------
	' Add a group by textbox
	'-------------------------------------------------
	Control StaticText
		Title "Group By:"
		Position 10,170
	Control EditText
		ID 3
		Position 10,180
		Height 40
		Width 170
		'Into sGroupClause

	'-------------------------------------------------
	' Add an order by textbox
	'-------------------------------------------------
	Control StaticText
		Title "Order By:"
		Position 10,230
	Control EditText
		ID 4
		Position 10,240
		Height 40
		Width 170
		'Into sOrderClause

	'-------------------------------------------------
	' Add a SQL species table listbox
	'-------------------------------------------------
	Control StaticText
		Title "SQL Species Tables:"
		Position 190,10
	Control ListBox
		ID 5
		Title ""
		Position 190, 20
		Height 60
		Width 100

	'-------------------------------------------------
	' Add a radio group box for the output format
	'-------------------------------------------------
	Control StaticText
		Title "Output File Format:"
		Position 190,90
	Control RadioGroup
		ID 6
		Title "MapInfo (.tab) file;ESRI (.shp) file;Comma-Separated (.csv) file"
		Position 190,105
		Value 1
		'Into iOutputFormat
		Calling SetFileFormat

	'-------------------------------------------------
	' Add a checkbox for setting symbology
	'-------------------------------------------------
	Control CheckBox
		ID 7
		Title "Set default symbology?"
		Position 190,160
		Value FALSE
		'Into bSetSymbology

	'-------------------------------------------------
	' Add a checkbox for clearing the log file
	'-------------------------------------------------
	Control CheckBox
		ID 8
		Title "Clear log file?"
		Position 10,290
		Value TRUE
		'Into bClearLog

	'-------------------------------------------------
	' Add Save and Load buttons
	'-------------------------------------------------
	Control Button
		ID 9
		Title "Save"
		Position 95,290
		Width 40
		Calling SaveQuery
	Control Button
		ID 10
		Title "Load"
		Position 140,290
		Width 40
		Calling LoadQuery

	'-------------------------------------------------
	' Add Ok and Cancel buttons
	'-------------------------------------------------
	Control CancelButton
		Position 205,290
		Width 40
	Control Button
		ID 11
		Title "Ok"
		Position 250,290
		Width 40
		Calling CheckSelection

	'-------------------------------------------------
	' Add a checkbox for plotting spatially
	'-------------------------------------------------
	Control CheckBox
		ID 12
		Title "Plot data spatially?"
		Position 190,210
		Value TRUE
		Hide
		'Into bSetSymbology

	'-------------------------------------------------
	' Add an order by textbox
	'-------------------------------------------------
	Control StaticText
		ID 13
		Title "Max Points Precision:"
		Position 190,230
		Hide
	Control EditText
		ID 14
		Position 190,240
		Height 15
		Width 30
		Hide
		'Into sOrderClause

Done:
	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Resume Done

End Sub

Sub DialogSetup
'***************************************************************
' Setup the dialog window listboxes
'***************************************************************

	'-------------------------------------------------
	' Clear the Message window and close it
	'-------------------------------------------------
	Print(chr$(12))
	Close Window Message

	'-------------------------------------------------
	' Trap any connection errors
	'-------------------------------------------------
	OnError Goto ConnectionError

	'-------------------------------------------------
	' Connect to the SQL Server database
	'-------------------------------------------------
	nConn = Server_Connect("ODBC","FILEDSN=" + sFileDSN)
	If nConn = 0 Then
		Note "Error: Unable to connect to SQL Server!"
		Call egsit
	End If 

	'-------------------------------------------------
	' No longer trap any errors
	'-------------------------------------------------
	OnError Goto 0

	'-------------------------------------------------
	' Query all the species tables in the database
	'-------------------------------------------------
	Dim nStmt as Integer
	nStmt = Server_Execute(nConn, sTableListSQL)

	'-------------------------------------------------
	' Bind to the 1st column of the results
	'-------------------------------------------------
	Dim aSQLTable As String
	Dim iStatus As Integer
	Server nStmt Bind Column 1 To aSQLTable, iStatus
	Server nStmt Fetch Next

	'-------------------------------------------------
	' Loop through all the Species tables matching the
	' SQL criteria and add them to the Species Tables list
	'-------------------------------------------------
	Dim i as integer
	i = 1
	While Not Server_Eot(nStmt)

		'-------------------------------------------------
		' Concatenate all the Species tables into an array
		'-------------------------------------------------
		Redim aSQLTables(i)
		aSQLTables(i) = aSQLTable
		Server nStmt Fetch Next
		i = i + 1

	Wend

	'-------------------------------------------------
	' Close the query results
	'-------------------------------------------------
	Server nStmt Close

	'-------------------------------------------------
	' Update the Species Table list to show the list
	' of tables
	'-------------------------------------------------
	Alter Control 5 Title FROM Variable aSQLTables
	Alter Control 5 Value 1

	'-------------------------------------------------
	' Show or hide the spatial controls
	'-------------------------------------------------
	If bSpatialTables = False
	And sEastingCol <> ""
	And sNorthingCol <> ""
	And sPrecisionCol <> "" Then
		Alter Control 12 Show
		Alter Control 13 Show
		Alter Control 14 Show
	End If

SetDefaults:
	'-------------------------------------------------
	' Set the default value for the zip checkbox
	'-------------------------------------------------
	Do Case UCase$(sDefaultFormat)
		Case "TAB"
			Alter Control 6 Value 1
		Case "SHP"
			Alter Control 6 Value 2
		Case "CSV"
			Alter Control 6 Value 3
		Case Else
			Alter Control 6 Value 1
	End Case

	'-------------------------------------------------
	' Set the default value for setting the symbology
	'-------------------------------------------------
	If UCase$(sDefaultSetSymbology) = "Y" OR UCase$(sDefaultSetSymbology) = "YES" Then
		Alter Control 7 Value TRUE
	End If

	'-------------------------------------------------
	' Set the detault maximum point precision
	'-------------------------------------------------
	If bSpatialTables = False Then
		Alter Control 14 Value Str$(val(sDefaultPointPrecision))
	End If

Exit Sub

ConnectionError:

If Err() = 1333 Then
	Note "Error: Unable to connect to SQL Server!"
'	Call MyPrint("Error: Unable to connect to SQL Server!")
	Call egsit
End If

End Sub

Sub SaveQuery
'***************************************************************
'* Save the current query details to a text file
'***************************************************************

	'-------------------------------------------------
	' Prompt the user for the query file destination
	'-------------------------------------------------
	Dim sQueryFile As String
	sQueryFile = FileSaveAsDlg(sDefaultQueryPath, "", "qsf", "Select where to save the query")
	if sQueryFile = "" then
		Note "No query file selected - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected query file
	'-------------------------------------------------
	Dim sQueryPath, sQueryName As String
	sQueryPath = PathToDirectory$(sQueryFile)
	sQueryName = PathToFileName$(sQueryFile)

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sQueryPath)
	if iSuccess = 0 Then
		Note "Query folder does not exist - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sQueryName, 3)) <> UCase$("QSF") Then
		Note "Query file has incorrect extension - save cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Clear the query file if it already exists
	'-------------------------------------------------
	If FileExists(sQueryName) Then
		Kill sQueryName
	End If

	'-------------------------------------------------
	' Open the query file for output
	'-------------------------------------------------
	Open File sQueryName For Append As #5

	'-------------------------------------------------
	' Replace any CR characters with '$$' before saving
	'-------------------------------------------------
	Dim sFields, sWhere, sGroup, sOrder As String
	sFields = StringReplace(ReadControlValue(1), chr$(10), "$$")
	sWhere = StringReplace(ReadControlValue(2), chr$(10), "$$")
	sGroup = StringReplace(ReadControlValue(3), chr$(10), "$$")
	sOrder = StringReplace(ReadControlValue(4), chr$(10), "$$")

	'-------------------------------------------------
	' Save the query details to the query file
	'-------------------------------------------------
	Print #5, "Fields {" + sFields + "}"
	Print #5, "Where {" + sWhere + "}"
	Print #5, "Group By {" + sGroup + "}"
	Print #5, "Order By {" + sOrder + "}"

	'-------------------------------------------------
	' Close the query file
	'-------------------------------------------------
	Close File #5

End Sub

Sub LoadQuery
'***************************************************************
'* Load an existing query details from a text file
'***************************************************************

	'-------------------------------------------------
	' Prompt the user for the query file location
	'-------------------------------------------------
	Dim sQueryFile As String
	sQueryFile = FileOpenDlg(sDefaultQueryPath, "", "qsf", "Select which query to load")
	if sQueryFile = "" then
		Note "No query file selected - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected query file
	'-------------------------------------------------
	Dim sQueryPath, sQueryName As String
	sQueryPath = PathToDirectory$(sQueryFile)
	sQueryName = PathToFileName$(sQueryFile)

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sQueryPath)
	if iSuccess = 0 Then
		Note "Query folder does not exist - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sQueryName, 3)) <> UCase$("QSF") Then
		Note "Query file has incorrect extension - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the query file exists
	'-------------------------------------------------
	If Not FileExists(sQueryName) Then
		Note "Query file not found - load cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Open the query file for input
	'-------------------------------------------------
	Open File sQueryName For Input As #6

	'-------------------------------------------------
	' Get the first line
	'-------------------------------------------------
	Dim sLine As String
	Line Input #6, sLine

	'-------------------------------------------------
	' Loop through all the lines until the file
	' is empty
	'-------------------------------------------------
	Dim sFieldsText, sWhereText, sGroupText, sOrderText As String
	Do Until EOF(6)

		'-------------------------------------------------
		' Store the line in the relevant string
		'-------------------------------------------------
		If UCase$(Left$(sLine, 8)) = "FIELDS {" Then
			sFieldsText = Mid$(sLine, 9, Len(sLine) - 9)
		End if

		If UCase$(Left$(sLine, 7)) = "WHERE {" Then
			sWhereText = Mid$(sLine, 8, Len(sLine) - 8)
		End if

		If UCase$(Left$(sLine, 10)) = "GROUP BY {" Then
			sGroupText = Mid$(sLine, 11, Len(sLine) - 11)
		End if

		If UCase$(Left$(sLine, 10)) = "ORDER BY {" Then
			sOrderText = Mid$(sLine, 11, Len(sLine) - 11)
		End if

		'-------------------------------------------------
		' Get the next line
		'-------------------------------------------------
		Line Input #6, sLine

	Loop

	'-------------------------------------------------
	' Close the query file
	'-------------------------------------------------
	Close File #6

	'-------------------------------------------------
	' Replace any '$$' characters with CR before loading
	' into the form
	'-------------------------------------------------
	Dim sFields, sWhere, sGroup, sOrder As String
	sFields = StringReplace(sFieldsText, "$$", chr$(10))
	sWhere = StringReplace(sWhereText, "$$", chr$(10))
	sGroup = StringReplace(sGroupText, "$$", chr$(10))
	sOrder = StringReplace(sOrderText, "$$", chr$(10))

	'-------------------------------------------------
	' Load the query details to the form
	'-------------------------------------------------
	Alter Control 1 Value sFields
	Alter Control 2 Value sWhere
	Alter Control 3 Value sGroup
	Alter Control 4 Value sOrder

End Sub

Sub CheckSelection
'***************************************************************
'* Check the user's selections and process according
'***************************************************************

	'-------------------------------------------------
	' Store the dialog variables
	'-------------------------------------------------
	sColumnNames = ReadControlValue(1)
	sWhereClause = ReadControlValue(2)
	sGroupClause = ReadControlValue(3)
	sOrderClause = ReadControlValue(4)
	iSppTable = ReadControlValue(5)
	iOutputFormat = ReadControlValue(6)
	bSetSymbology = ReadControlValue(7)
	bClearLog = ReadControlValue(8)
	bPlotSpatialData = ReadControlValue(12)
	sMaxPointsPrecision = ReadControlValue(14)

	'-------------------------------------------------
	' Check if the user has selected at least one table
	' from the species table list
	'-------------------------------------------------
	if iSppTable = 0 then
		Note "No table has been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has entered a valid maximum
	' points precision value
	'-------------------------------------------------
	If bPlotSpatialData = True
	And sMaxPointsPrecision <> str$(val(sMaxPointsPrecision)) Then
		Note "Max points precision must be numeric!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Close the dialog
	'-------------------------------------------------
	Dialog Remove

	'-------------------------------------------------
	' Clear the log file
	'-------------------------------------------------
	If bClearLog = True Then
		If FileExists(sLogFileName) Then
			Kill sLogFileName
		End If
	End If

	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process started!")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("")

	'-------------------------------------------------
	' Process the selection
	'-------------------------------------------------
	Call ProcessSelection

	Call MyPrint("")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process completed!")
	Call MyPrint("----------------------------------------------------------------------")
	Dim lResponse As Logical
	lResponse = Ask("Processing complete!" + Chr$(10) + Chr$(10) + Chr$(10) + "Show log file?", "Yes", "No")

	'-------------------------------------------------
	' Ask the user if they want to see the log file
	'-------------------------------------------------
	If lResponse = True Then
		'-------------------------------------------------
		' Open the Message window and clear it
		'-------------------------------------------------
		Close Window Message
		Open Window Message
		Set Window Message
			Position (7,4)
			Width 7
			Height 5
		Print(chr$(12))

		'-------------------------------------------------
		' Display the log file in the message window
		'-------------------------------------------------
		Call PrintLogFile

	End If

	'-------------------------------------------------
	' Disconnect the connection to the SQL Server database
	'-------------------------------------------------
	Server nConn Disconnect

End Sub

Sub SetFileFormat
'***************************************************************
'* Show or hide the set symbology checkbox depending upon the
'* selected file format.
'***************************************************************

	'-------------------------------------------------
	' Check if the user has selected at least one table
	' from the species table list
	'-------------------------------------------------
	Dim iFileFormat As Integer
	iFileFormat = ReadControlValue(6)
	If iFileFormat = 1 then
		Alter Control 7 Show
	Else
		Alter Control 7 Hide
	End If

End Sub

Sub ProcessSelection
'***************************************************************
'* Process the table selection
'***************************************************************

	Dim sTableName As String
	sTableName = aSQLTables(iSppTable)

	Call MyPrint ("Table Name = '" + sTableName + "'")

	Do Case iOutputFormat
		Case 1
			sOutputFormat = "tab"
			Call MyPrint("Output Format = '.tab'")
		Case 2
			sOutputFormat = "shp"
			Call MyPrint("Output Format = '.shp'")
		Case 3
			sOutputFormat = "csv"
			Call MyPrint("Output Format = '.csv'")
		Case Else
			sOutputFormat = "tab"
			Call MyPrint("Output Format = '.tab'")
	End Case

	'-------------------------------------------------
	' Prompt the user for the output file destination
	'-------------------------------------------------
	sOutputFile = FileSaveAsDlg(sDefaultExtractPath, "", sOutputFormat, "Select where to save the output file")

	if sOutputFile = "" then
		Call MyPrint("No output file selected - selection cancelled")
		Note "No output file selected - selection cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Get the path and name of the selected output file
	'-------------------------------------------------
	Dim sOutputPath, sOutputName As String
	sOutputPath = PathToDirectory$(sOutputFile)
	sOutputName = PathToFileName$(sOutputFile)

	'-------------------------------------------------
	' Check the selected directory already exists
	'-------------------------------------------------
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sOutputPath)
	if iSuccess = 0 Then
		Call MyPrint("Output folder does not exist - selection cancelled")
		Note "Output folder does not exist - selection cancelled"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check the selected file name has the correct
	' extension
	'-------------------------------------------------
	if UCase$(Right$(sOutputName, 3)) <> UCase$(sOutputFormat) Then
		Call MyPrint("Output file has incorrect extension - selection cancelled")
		Note "Output file has incorrect extension - selection cancelled"
		Exit Sub
	End If

	Dim sShortName As String
	sShortName = Left$(sOutputName, Len(sOutputName) - 4)

	Call MyPrint("Output File = '" + sOutputFile + "'")

	'-------------------------------------------------
	' Call the subroutine to select the records from
	' the selected table using the user's where clause
	'-------------------------------------------------
	Call SelectSpecies(nConn, sColumnNames, sWhereClause, sGroupClause, sOrderClause, sOutputPath, sShortName, sTableName)

End Sub

Sub SelectSpecies (ByVal nConn As Integer,
	sColumnNames As String,
	sWhereClause As String,
	sGroupClause As String,
	sOrderClause As String,
	sOutputPath As String,
	sOutputName As String,
	sTableName As String)
'*************************************************
'* Routine to select the species records from
'* the table name passed in the call where the
'* attributes meet the where clause also passed
'* in the call.
'*************************************************

	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Get the current user ID
	'-------------------------------------------------
	Dim sUserID As String
	sUserID = GetUserID()
	sUserID = StringReplace(sUserID, " ", "_")
	sUserID = StringReplace(sUserID, ".", "_")

	'-------------------------------------------------
	' Setup the temporary and local table names
	'-------------------------------------------------
	Dim sTempName As String
	sTempName = sTableName + "_" + sUserID
	Call MyPrint("Selecting from table = '" + sTableName + "' ...")

	'-------------------------------------------------
	' Execute a SQL Server stored procedure to select
	' the species records based on the where clause,
	' group by and order by
	'-------------------------------------------------
	sWhereClause = StringReplace(sWhereClause, "'", "''")
	Dim nStmt1 As Integer
	nStmt1 = Server_Execute(nConn, "EXECUTE dbo.AFSelectSppSubset '"
	 + sDefaultSchema	 + "', '" + sTableName + "', '" + sColumnNames + "', '"
	 + sWhereClause + "', '" + sGroupClause + "', '" + sOrderClause + "', '"
	 + sUserID + "'")

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt1 Close

	'-------------------------------------------------
	' Count the number of species records that have
	' been selected in the subset temporary table
	'-------------------------------------------------
	Dim nStmt2 As Integer
	Dim iRecTotal As Integer
	Dim iRecStatus As Integer
	nStmt2 = Server_Execute(nConn, "Select Count(*) As Records From " + sDefaultSchema + "." + sTempName)
	Server nStmt2 Bind Column 1 To iRecTotal, iRecStatus
	Server nStmt2 Fetch Next

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt2 Close

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("No records found - selection cancelled.")
		Note "No records found - selection cancelled."
		Exit Sub
	End If

	Call MyPrint("" + FormatNumber$(iRecTotal) + " records selected.")

	'-------------------------------------------------
	' Check if the maximum number of records will be
	' exceeded
	'-------------------------------------------------
	If iRecTotal > iRecMax Then
		Call MyPrint("Record count exceeds maximum of " + iRecMax + " - selection cancelled.")
		Note "Record count exceeds maximum of " + iRecMax + " - selection cancelled."
		Exit Sub
	End If

	'-------------------------------------------------
	' Close the temporary table if already/still open
	' in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen(sTempName) Then
		Call MyPrint("Closing the temporary table ...")
		Close Table sTempName
	End If

	'-------------------------------------------------
	' Check if the local table is already/still open
	' and close it if it is
	'-------------------------------------------------
	Dim sOpenTableName As String
	sOpenTableName = TabFileIsOpen(sOutputPath + sOutputName + ".TAB")
	If sOpenTableName <> "" Then
		Call MyPrint("Closing local table ...")
		Close Table sOpenTableName
	End If

	'-------------------------------------------------
	' Replace any spaces in the table name with
	' underscores
	'-------------------------------------------------
	Dim sIntoName As String
	sIntoName = StringReplace(sOutputName, " ", "_")

	Call MyPrint("Saving into '" + sOutputName + "' ...")

	'-------------------------------------------------
	' Set up the SQL statement for creating an empty
	' temporary table (to check the record length).
	'-------------------------------------------------
	Dim sSQLStmt As String
	sSQLStmt = "Select Top(0) * From " + sDefaultSchema + "." + sTempName

	'-------------------------------------------------
	' Link the temporary table as a local table
	'-------------------------------------------------
	Call MyPrint("Linking dummy table ...")
	Server nConn Link Table
	sSQLStmt
	Toolkit "ODBC"
	Into sIntoName
	File sOutputPath + sOutputName
	Autokey Off
	ReadOnly

	'-------------------------------------------------
	' Get the table name alias of the new table
	'-------------------------------------------------
	Dim sTableAlias As String
	sTableAlias = TableInfo(0, TAB_INFO_NAME)

	'-------------------------------------------------
	' Check if the table contains an Ocj column
	' which indicates if there is any spatial data
	'-------------------------------------------------
	Dim bSpatial As Logical
	If ColumnExists(sTableAlias, "Obj") Then
		bSpatial = True
	Else
		bSpatial = False
	End If

	'-------------------------------------------------
	' Check if the maximum record length will be exceeded
	'-------------------------------------------------
	Dim iRowLength As Integer
	iRowLength = GetRowLength(sTableAlias)
	If iRowLength > 4096 Then

		Call MyPrint("Record length exceeds maximum of 4,096 bytes - selection cancelled.")
		Note "Record length exceeds maximum of 4,096 bytes - selection cancelled."

		'-------------------------------------------------
		' Drop the local table
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping local table ...")
			Drop Table sTableAlias
		End If

		Exit Sub

	Else
		Call MyPrint("Total record length = " + FormatNumber$(iRowLength) + " bytes")
	End If

	'-------------------------------------------------
	' Check if the total data size will be exceeded
	'-------------------------------------------------
	Dim iDataSize As Integer
	iDataSize = (iRowLength * iRecTotal) / 1024

	If iDataSize > (2*1024*1024) Then

		Call MyPrint("Total data size exceeds maximum of 2 Gb - selection cancelled.")
		Note "Total data size exceeds maximum of 2 Gb - selection cancelled."

		'-------------------------------------------------
		' Drop the local table
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping local table ...")
			Drop Table sTableAlias
		End If

		Exit Sub

	Else
		Call MyPrint("Total data size = " + FormatNumber$(iDataSize) + " Kb")
	End If

	'-------------------------------------------------
	' Unlink the temporary table to leave the local
	' table as a regular standalone table
	'-------------------------------------------------
	Call MyPrint("Unlinking dummy table ...")
	Unlink sTableAlias

	'-------------------------------------------------
	' Close the dummy table
	'-------------------------------------------------
	If TableIsOpen(sTableAlias) Then
		Call MyPrint("Closing the dummy table ...")
		Close Table sTableAlias
	End If

	sSQLStmt = "Select * From " + sDefaultSchema + "." + sTempName

	'-------------------------------------------------
	' Link the temporary table as a local table
	'-------------------------------------------------
	Call MyPrint("Linking local table ...")
	Server nConn Link Table
	sSQLStmt
	Toolkit "ODBC"
	Into sIntoName
	File sOutputPath + sOutputName
	Autokey Off
	ReadOnly

	'-------------------------------------------------
	' Get the table name alias of the new table
	'-------------------------------------------------
	sTableAlias = TableInfo(0, TAB_INFO_NAME)

	'-------------------------------------------------
	' Unlink the temporary table to leave the local
	' table as a regular standalone table
	'-------------------------------------------------
	Call MyPrint("Unlinking local table ...")
	Unlink sTableAlias

	'-------------------------------------------------
	' Execute a SQL Server stored procedure to delete
	' the species records temporary table
	'-------------------------------------------------
	Dim nStmt3 As Integer
	nStmt3 = Server_Execute(nConn, "EXECUTE dbo.AFClearSppSubset '" + sDefaultSchema
	 + "', '" + sTableName + "', '" + sUserID + "'")

	'-------------------------------------------------
	' Close the results
	'-------------------------------------------------
	Server nStmt3 Close

	Set ProgressBars Off

	'-------------------------------------------------
	' If the local table contains a MI_STYLE
	' column then delete the column
	'-------------------------------------------------
	If ColumnExists(sTableAlias, "MI_STYLE") Then
		Alter Table sTableAlias (Drop MI_STYLE)
	End If

	'-------------------------------------------------
	' If the local table contains a MI_PRINX
	' column then delete the column
	'-------------------------------------------------
	If ColumnExists(sTableAlias, "MI_PRINX") Then
		Alter Table sTableAlias (Drop MI_PRINX)
	End If

	'-------------------------------------------------
	' If the local table contains a MI_SQL_REC_NUM
	' column then delete the column
	'-------------------------------------------------
	If ColumnExists(sTableAlias, "MI_SQL_REC_NUM") Then
		Alter Table sTableAlias (Drop MI_SQL_REC_NUM)
	End If

	Set ProgressBars On

	'-------------------------------------------------
	' If the data is to be plotted spatially
	'-------------------------------------------------
	If bPlotSpatialData = True Then

		'-------------------------------------------------
		' Check the local table contains the required
		' columns
		'-------------------------------------------------
		If ColumnExists(sTableAlias, sEastingCol) And
		   ColumnExists(sTableAlias, sNorthingCol) And
		   ColumnExists(sTableAlias, sPrecisionCol) Then

			'-------------------------------------------------
			' If the local table doesn't contain an Obj
			' column then add the column
			'-------------------------------------------------
			If Not ColumnExists(sTableAlias, "Obj") Then
				Create Map For sTableAlias CoordSys Earth Projection 8, 79, "m", -2, 49, 0.9996012717, 400000, -100000
			End If

			'-------------------------------------------------
			' Turn on FastEdit to speed up the updates
			'-------------------------------------------------
			Set Table sTableAlias FastEdit On

			'-------------------------------------------------
			' Plot the records as points or polygons based
			' on the maximum points precision value
			'-------------------------------------------------
			Dim iMaxPointSize As Integer
			iMaxPointSize = val(sMaxPointsPrecision)

			Call PlotSpatialData(sTableAlias, iMaxPointSize,
				sEastingCol, sNorthingCol, sPrecisionCol)

			'-------------------------------------------------
			' Turn off FastEdit after updates
			'-------------------------------------------------
			Set Table sTableAlias FastEdit Off

			'-------------------------------------------------
			' Flag that the data is now spatial
			'-------------------------------------------------
			bSpatial = True

		Else
	
			Call MyPrint("Table does not contain required columns - plotting cancelled.")
			Note "Table does not contain required columns - plotting cancelled."

		End If

	End If

	'-------------------------------------------------
	' Export the table as a CSV if required
	'-------------------------------------------------
	If iOutputFormat = 3 Then
		Call MyPrint("Exporting as a CSV ...")
		Export sTableAlias
			Into sOutputPath + sOutputName + ".csv"
			Type "CSV"
			Titles
			Overwrite
	End If

	'-------------------------------------------------
	' Translate the table to ESRI shapefile if required
	'-------------------------------------------------
	If iOutputFormat = 2 Then
		Dim sLogFilePath As String
		sLogFilePath = PathToDirectory$(sLogFileName)

		Call MyPrint("Log File Path = '" + sLogFilePath + "'")

		Call TranslateToShapefile(sLogFilePath, sTempName, sOutputPath, sOutputName)
	End If

	'-------------------------------------------------
	' If a MapInfo table is required
	'-------------------------------------------------
	If iOutputFormat = 1 Then

		'-------------------------------------------------
		' Check if the local table is mappable (i.e.
		' contains the 'OBJ' graphics column) and the
		' graphics column contains spatial data
		'-------------------------------------------------
		If TableInfo(sTableAlias, TAB_INFO_MAPPABLE)
		And bSpatial = True Then

			'-------------------------------------------------
			' If the symbology is to be set and the table is
			' open
			'-------------------------------------------------
			If bSetSymbology = TRUE
			And TableIsOpen(sTableAlias) Then

				'-------------------------------------------------
				' If the local table contains a GRPRECISION
				' column (which the symbology is based on)
				'-------------------------------------------------

				If ColumnExists(sTableAlias, "GRPRECISION") Then

					'-------------------------------------------------
					' Add an index to the precision field to speed
					' up the symbology setting
					'-------------------------------------------------
					Create Index On sTableAlias(GRPRECISION)

					'-------------------------------------------------
					' Turn on FastEdit to speed up the updates
					'-------------------------------------------------
					Set Table sTableAlias FastEdit On

					'-------------------------------------------------
					' Set the symbology for the table
					'-------------------------------------------------
					Call MyPrint("Setting symbology in table ...")

					Dim sNodeName As String
					sNodeName = "Subset"
					Call SetSymbology(sNodeName, sTableAlias)

					'-------------------------------------------------
					' Turn off FastEdit after updates
					'-------------------------------------------------
					Set Table sTableAlias FastEdit Off

				Else

					Call MyPrint("Table does not contain 'GRPRECISION' column - unable to set symbology.")
					Note "Table does not contain 'GRPRECISION' column - unable to set symbology."

				End If

			End If

	 		'-------------------------------------------------
			' Add the table to the top most map window (if
			' there is one), otherwise create a new map
			' window using the table.
			'-------------------------------------------------
			If NumWindows() > 0 Then
				Add Map Layer sTableAlias
			Else
				Map From sTableAlias
			End If

		Else

	 		'-------------------------------------------------
			' Opens the table in a browser window
			'-------------------------------------------------
			Browse * From sTableAlias

			'Call MyPrint("Table does not have graphic information. Unable to map layer.")
			'Note "Table does not have graphic information. Unable to map layer."

		End If

		'-------------------------------------------------
		' Close the table
		'-------------------------------------------------
		'Call MyPrint("Closing the MapInfo table ...")
		'Close Table sTableAlias

	Else

		'-------------------------------------------------
		' If a MapInfo table is not required then
		' check if the local table is open and drop it
		'-------------------------------------------------
		If TableIsOpen(sTableAlias) Then
			Call MyPrint("Dropping the MapInfo table ...")
			Drop Table sTableAlias
		End If

	End If

	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

End Sub

Sub PlotSpatialData
	(sTableName As String,
	iMaxPointSize As Integer,
	EastingCol As String,
	NorthingCol As String,
	PrecisionCol As String)
'***************************************************************
'* Plot the records as points or polygons based on the
'* maximum points precision value
'***************************************************************

	'-------------------------------------------------
	' Select all the rows of the desired object type
	' matching the required SQL clause
	'-------------------------------------------------
	Dim sCmd As String
	sCmd = "Select " + EastingCol + ", " + NorthingCol + ", " + PrecisionCol + ", Obj, CentroidX(Obj), CentroidY(Obj) From " + sTableName + " Into NewObj"
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of rows selected
	'-------------------------------------------------
	Dim iRows As Integer
	iRows = TableInfo(NewObj, TAB_INFO_NROWS)

	Call MyPrint("Plotting " + FormatNumber$(iRows) + " rows as points or polygons")

	'-------------------------------------------------
	' If any rows were selected then set the object
	'-------------------------------------------------
	If iRows > 0 Then

		Set Coordsys table NewObj

		'-------------------------------------------------
		' Fetch the first of the selected rows
		'-------------------------------------------------
		Fetch First from NewObj

		'-------------------------------------------------
		' Loop through all the selected rows setting the
		' spatial object
		'-------------------------------------------------
		Dim iRow as Integer
		iRow = 1
		Do while iRow <= iRows

			Dim X, Y, Z as Integer
			Z = NewObj.col3
			X = int(NewObj.col1 / Z) * Z
			Y = int(NewObj.col2 / Z) * Z
			'X = NewObj.col1
			'Y = NewObj.col2

			'-------------------------------------------------
			' Create a dummy object to plot
			'-------------------------------------------------
			Dim oUpdateObj as Object
			'oUpdateObj = NewObj.obj

			If Z <= iMaxPointSize Then

				'-------------------------------------------------
				' Create a point in the object
				'-------------------------------------------------
				Create Point Into Variable oUpdateObj ( X, Y )

			Else

				'-------------------------------------------------
				' Create a region in the object
				'-------------------------------------------------
				Dim pX(5), pY(5) As Integer
				Dim i As Integer
				pX(1) = X
				pY(1) = Y
				pX(2) = pX(1) + Z
				pY(2) = pY(1)
				pX(3) = pX(1) + Z
				pY(3) = pY(1) + Z
				pX(4) = pX(1)
				pY(4) = pY(1) + Z
				pX(5) = pX(1)
				pY(5) = pY(1)

				' Create an empty region object
				Create Region Into Variable oUpdateObj 0

				' Now add nodes to populate the object
				For i = 1 to 5
					Alter Object oUpdateObj Node Add ( pX(i), pY(i) )
				Next

			End If

			' Update the object in the table
			Update NewObj Set Obj = oUpdateObj Where RowID = iRow

			'-------------------------------------------------
			' Save the updates every 1000 rows
			'-------------------------------------------------
			'Dim y As Float
			'y = (iRow / 1000)
			'If Int(y) = y Then
			'	sCmd = "Commit Table NewStyle"
			'	Run Command (sCmd)
			'End If

			'-------------------------------------------------
			' Fetch the next of the selected rows
			'-------------------------------------------------
			Fetch next from NewObj
			iRow = iRow + 1

		Loop

		'-------------------------------------------------
		' Save the updates
		'-------------------------------------------------
		Set ProgressBars Off

		sCmd = "Commit Table NewObj"
		Run Command (sCmd)

		Set ProgressBars Off

	End If

CleanUp:
	'-------------------------------------------------
	' Close the temporary NewObjtable if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("NewObj") Then
		Close Table NewObj
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

End Sub

Sub SetSymbology(sNodeName as String, sLocalName As String)
'***************************************************************
'* Retrieve the symbology styles and clauses from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode
	Dim hXMLSpeciesTableNode As MIXmlNode
	Dim hXMLTableNode As MIXmlNode
	Dim hXMLSymbologyNode As MIXmlNode
	Dim hXMLSymbolNodeList As MIXMLNodeList
	Dim hXMLSymbolNode As MIXmlNode

	OnError Goto GetSymbologyError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSelector.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataExtractor node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSelector")
	          If hXMLNode Then
	
					'-------------------------------------------------
					' Get a handle on the SpeciesTables node
					'-------------------------------------------------
					hXMLSpeciesTableNode = MIXmlSelectSingleNode(hXMLNode, "SpeciesTables")

					'-------------------------------------------------
					' Get a handle on the current species table node
					'-------------------------------------------------
					hXMLTableNode = MIXmlSelectSingleNode(hXMLSpeciesTableNode, sNodeName)

					'-------------------------------------------------
					' Get a handle on the symbology node for the table
					'-------------------------------------------------
					hXMLSymbologyNode = MIXmlSelectSingleNode(hXMLTableNode, "Symbology")

					'-------------------------------------------------
					' Get a handle on the node map of the above node
					'-------------------------------------------------
					hXMLSymbolNodeList = MIXMLGetChildList(hXMLSymbologyNode)

					'-------------------------------------------------
					' Get a handle on the first attribute in the node list
					'-------------------------------------------------
					hXMLSymbolNode = MIXMLGetNextNode(hXMLSymbolNodeList)

					'-------------------------------------------------
					' Loop through all the attributes in the node list
					' applying the style using the SQL clauses
					'-------------------------------------------------
					Dim i As Integer
					i = 0
					Do while hXMLSymbolNode
						
						i = i + 1

						' SQL clause used to retrieve the required rows from the species table
						Dim sClause As String
						sClause = GetSingleNodeValue(hXMLSymbolNode, "Clause")

						' Type of object (i.e. Point or Region)
						Dim sObject As String
						sObject = GetSingleNodeValue(hXMLSymbolNode, "Object")

						' Styles (depending on type of object)
						Dim sSymbol, sPen, sBrush As String
						Dim stlSymbol As Symbol
						Dim stlPen As Pen
						Dim stlBrush As Brush

						'stlSymbol = ""
						'stlPen = ""
						'stlBrush = ""
						Do Case sObject
							Case "Point"
								sSymbol = GetSingleNodeValue(hXMLSymbolNode, "Symbol")
								stlSymbol = STLText2Symbol(sSymbol)
							Case "Region"
								sPen = GetSingleNodeValue(hXMLSymbolNode, "Pen")
								stlPen = STLText2Pen(sPen)
								sBrush = GetSingleNodeValue(hXMLSymbolNode, "Brush")
								stlBrush = STLText2Brush(sBrush)
							Case Else
						End Case

						'-------------------------------------------------
						' Close the temporary NewStyle table if it is
						' already/still open in the current MapInfo session
						'-------------------------------------------------
						If TableIsOpen("NewStyle") Then
							Close Table NewStyle
						End If

						'-------------------------------------------------
						' Select all the rows of the desired object type
						' matching the required SQL clause
						'-------------------------------------------------
						Dim sCmd As String
						sCmd = "Select * From " + sLocalName + " Where Str$(obj) = """ + sObject + """ And " + sClause + " Into NewStyle"
						Run Command (sCmd)

						'-------------------------------------------------
						' Count the number of rows selected
						'-------------------------------------------------
						Dim iRows As Integer
						iRows = TableInfo(NewStyle, TAB_INFO_NROWS)

						Call MyPrint("Setting " + sObject + " style for " + FormatNumber$(iRows) + " rows where " + sClause)

						'-------------------------------------------------
						' If any rows were selected then set the styles
						'-------------------------------------------------
						If iRows > 0 Then

							'-------------------------------------------------
							' Fetch the first of the selected rows
							'-------------------------------------------------
							Fetch First from NewStyle

							'-------------------------------------------------
							' Loop through all the selected rows setting the
							' symbology style
							'-------------------------------------------------
							Dim x as Integer
							x = 1
								Do while x <= iRows
								'-------------------------------------------------
								' Set the current object to update
								'-------------------------------------------------
								Dim oUpdateObj as Object
								oUpdateObj = NewStyle.obj

								'-------------------------------------------------
								' Alter the object style depending on the object
								' type and style type
								'-------------------------------------------------
								Do Case sObject
									Case "Point"
										Alter Object oUpdateObj Info OBJ_INFO_SYMBOL, stlSymbol
									Case "Region"
										Alter Object oUpdateObj Info OBJ_INFO_PEN, stlPen
										Alter Object oUpdateObj Info OBJ_INFO_BRUSH, stlBrush
									Case Else
								End Case

								Update NewStyle Set Obj = oUpdateObj Where RowID = x

								'-------------------------------------------------
								' Save the updates every 1000 rows
								'-------------------------------------------------
								'Dim y As Float
								'y = (x / 1000)
								'If Int(y) = y Then
								'	sCmd = "Commit Table NewStyle"
								'	Run Command (sCmd)
								'End If

								'-------------------------------------------------
								' Fetch the next of the selected rows
								'-------------------------------------------------
								Fetch next from NewStyle
								x = x + 1

							Loop

						End If

						'-------------------------------------------------
						' Get a handle on the next attribute in the node list
						'-------------------------------------------------
						hXMLSymbolNode = MIXMLGetNextNode(hXMLSymbolNodeList)

					Loop

					'-------------------------------------------------
					' Save the updates
					'-------------------------------------------------
					sCmd = "Commit Table NewStyle"
					Run Command (sCmd)

				End If

			End If

		Else

			Note "Error : " + MIGetErrorMessage()
			Note "x = " + x

		End If

	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLSymbolNode Then Call MIXmlNodeDestroy(hXMLSymbolNode) End If
	If hXMLSymbolNodeList Then Call MIXmlNodeListDestroy(hXMLSymbolNodeList) End If
	If hXMLSymbologyNode Then Call MIXmlNodeDestroy(hXMLSymbologyNode) End If
	If hXMLTableNode Then Call MIXmlNodeDestroy(hXMLTableNode) End If

	If hXMLSpeciesTableNode Then Call MIXmlNodeDestroy(hXMLSpeciesTableNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	'-------------------------------------------------
	' Close the temporary NewStyle table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("NewStyle") Then
		Close Table NewStyle
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

	Exit Sub

GetSymbologyError:
	Note str$(Err()) + ": " + Error$()
	Goto CleanUp
	Exit Sub

End Sub

Sub AboutBox
'***************************************************************
'* Display the 'About' dialog box
'***************************************************************

	Dialog
		Title "About Data Selector 1.03"
		Width 230
		Height 115

	Control StaticText
		Title "This program will select records from a SQL Server table"
		Position 10,10
	Control StaticText
		Title "based on the SQL statement entered by the user and will"
		Position 10,20
	Control StaticText
		Title "create a local MapInfo (.Tab) file, ESRI (.shp) file or"
		Position 10,30
	Control StaticText
		Title "Comma-Separated Text (.csv) file."
		Position 10,40
	Control StaticText
		Title "Created by Andy Foy Consulting."
		Position 10,60
	Control StaticText
		Title "Copyright© 2015 Greenspace Information for Greater London."
		Position 10,70
	Control OKButton
		Position 185,95

End Sub

Sub MyPrint(ByVal sMsg As String)
'***************************************************************
'* Bespoke print function
'***************************************************************

	'-------------------------------------------------
	' Open the log file for output
	'-------------------------------------------------
	Open File sLogFileName For Append As #1

	'-------------------------------------------------
	' Write the message passed to the output file
	'-------------------------------------------------
	Print #1, FormatDate$(CurDate()) + " " + FormatTime$(CurTime(),"H:mm:ss") + " : " + sMsg

	'-------------------------------------------------
	' Close the output file
	'-------------------------------------------------
	Close File #1

End Sub

Sub PrintLogFile()
'***************************************************************
'* Print the log file to the message window
'***************************************************************

	'-------------------------------------------------
	' Open the log file for input
	'-------------------------------------------------
	Open File sLogFileName For Input As #99

	'-------------------------------------------------
	' Get the first line
	'-------------------------------------------------
	Dim sMsg As String
	Line Input #99, sMsg

	'-------------------------------------------------
	' Loop through all the lines until the log file
	' is empty
	'-------------------------------------------------
	Do Until EOF(99)
		'-------------------------------------------------
		' Print the log file line to the message window
		'-------------------------------------------------
		Print sMsg

		'-------------------------------------------------
		' Get the next line
		'-------------------------------------------------
		Line Input #99, sMsg
	Loop

	'-------------------------------------------------
	' Refresh the message window
	'-------------------------------------------------
	Update Window WIN_MESSAGE

	'-------------------------------------------------
	' Close the log file
	'-------------------------------------------------
	Close File #99

End Sub

Sub egsit
'***************************************************************
'* Exit the program
'***************************************************************

	End Program

End Sub
