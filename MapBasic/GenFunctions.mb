'* DataSelector is a MapBasic tool and associated SQL scripts to extract
'* biodiversity information from SQL Server based on any selection criteria.
'*
'* Copyright © 2013 Greenspace Information for Greater London (GiGL)
'* Copyright © 2015 Andy Foy Consulting
'* 
'* This file is part of the MapInfo tool 'DataSelector'.
'* 
'* DataSelector is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSelector is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSelector.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* GenFunctions v1.02
'*
'* Contains general functions used by the DataSelector tool.
'*
'*
'* Created:		Andy Foy - February 2013
'* Last revised:	Andy Foy - June 2015
'* 
'* *****************  Version 1.02  *****************
'* Author: Andy Foy		Date: 08/06/2015
'* A. Added function to return userid.
'* 
'* *****************  Version 1.01  *****************
'* Author: Andy Foy		Date: 03/06/2015
'* A. Initial version of code based on Data Extractor tool.
'* 
'***************************************************************
Include "DataSelector.def"

Function TableIsOpen(ByVal sTabName As String) As Logical
'*************************************************
'* Check if the table is open
'*************************************************

	'-------------------------------------------------
	' Determine the number of open tables
	'-------------------------------------------------
	Dim iCounter, iNumberOfTables As Integer
	iNumberOfTables = NumTables()

	'-------------------------------------------------
	' Return FALSE if there are no open tables
	'-------------------------------------------------
	If iNumberOfTables = 0 Then
		TableIsOpen = FALSE
		Exit Function
	End If

	'-------------------------------------------------
	' Loop through the open tables looking for the
	' require table name. If found return TRUE
	'-------------------------------------------------
	For iCounter = 1 to iNumberOfTables
		If TableInfo(iCounter, TAB_INFO_NAME) = sTabName Then
			TableIsOpen = TRUE
			Exit Function
		End If
	Next

End Function

Function TabFileIsOpen(ByVal sTabFileName As String) As String
'*************************************************
'* Check if the tab file is open
'*************************************************

	'-------------------------------------------------
	' Determine the number of open tables
	'-------------------------------------------------
	Dim iCounter, iNumberOfTables As Integer
	iNumberOfTables = NumTables()

	'-------------------------------------------------
	' Return FALSE if there are no open tables
	'-------------------------------------------------
	If iNumberOfTables = 0 Then
		TabFileIsOpen = ""
		Exit Function
	End If

	'-------------------------------------------------
	' Loop through the open tables looking for the
	' require tab file name. If found return TRUE
	'-------------------------------------------------
	For iCounter = 1 to iNumberOfTables
		If TableInfo(iCounter, TAB_INFO_TABFILE) = sTabFileName Then
			TabFileIsOpen = TableInfo(iCounter, TAB_INFO_NAME)
			Exit Function
		End If
	Next

End Function

Function ColumnExists(ByVal sTableName As String, ByVal sColName As String) As Logical
'*************************************************
'* Check if the column exists in the table
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns looking for the
	' required name
	'-------------------------------------------------
	Dim i, j As Integer
	Dim sColName0 As String

	ColumnExists = False

	For i = 1 to TableInfo(sTableName, TAB_INFO_NCOLS)
 
       sColName0 = ColumnInfo(sTableName, "col"&i, COL_INFO_NAME)
		If UCase$(sColName) = UCase$(sColName0) Then
 			ColumnExists = True
			Exit For
		End If

	Next

End Function

Function ExecuteAndWait(ByVal cmdLine as string) As Integer
'*************************************************
'* Execute a command and wait for it to finish
'*************************************************

	OnError Goto ErrorHandle

	Dim nRetVal As Integer, nExitCode As Integer
	Dim NameOfProc As Process_Information, NameStart As StartUpInfo
	Dim hProc As Integer

	NameStart.cb = 256
	NameStart.dwFlags = 1
	NameStart.wShowWindow = 0

	' Start the shelled application
	nRetVal = CreateProcessA(0, cmdLine, 0, 0, 1, NORMAL_PRIORITY_CLASS, 0, 0, NameStart, NameOfProc)

	' Get the handle of the started process
	hProc = NameOfProc.hProcess

	' Wait for the shelled application process to finish
	nRetVal = WaitForSingleObject(hProc, INFINITE)

	' Get the exit code from the shelled application
	nRetVal = GetExitCodeProcess(hProc, nExitCode)

	' Close the process handle
	nRetVal = CloseHandle(hProc)

	ExecuteAndWait = nExitCode

Exit Function

ErrorHandle:
	ExecuteAndWait = FALSE
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Function

End Function

Function STLText2Symbol(ByVal sSymbol As String) As Symbol
'*************************************************
'* Convert style text string to symbol
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 3 Then
	'MapInfo 3.0 symbol set
	STLText2Symbol = MakeSymbol(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
ElseIf nNumItems > 3 Then
	Do Case arrItems(1)
		Case "1"
			'MapInfo 3.0 symbol set
			STLText2Symbol = MakeSymbol(Val(arrItems(2)), Val(arrItems(3)), Val(arrItems(4)))
		Case "2"
			'TrueType font as the symbol
			STLText2Symbol = MakeFontSymbol(Val(arrItems(2)), Val(arrItems(3)), Val(arrItems(4)), arrItems(5), Val(arrItems(6)), Val(arrItems(7)))
		Case "3"
			'Symbol value based on a bitmap file
			STLText2Symbol = MakeCustomSymbol(arrItems(2), Val(arrItems(3)), Val(arrItems(4)), Val(arrItems(5)))
	End Case
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Symbol = CurrentSymbol()
End Function

Function STLText2Pen(ByVal sSymbol As String) As Pen
'*************************************************
'* Convert style text string to pen
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 3 Then
	STLText2Pen = MakePen(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Pen = CurrentPen()
End Function

Function STLText2Brush(ByVal sSymbol As String) As Brush
'*************************************************
'* Convert style text string to brush
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 2 Then
	STLText2Brush = MakeBrush(Val(arrItems(1)), Val(arrItems(2)), -1)
ElseIf nNumItems = 3 Then
	STLText2Brush = MakeBrush(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Brush = CurrentBrush()
End Function

Function StringSplit(ByVal sText As String, ByVal sSplitChar As String, arrParts() As String) As Integer
'*************************************************
'* Splits a comma delimeted string into separate
'* values in an array
'*************************************************
	Dim sCopy As String, nBeg, nEnd As Integer, nCount As Integer 
	OnError GoTo ErrorOccured 
	nEnd = 0 
	nCount = 0 
	sCopy = UCase$(sText) 
	
	Do While nEnd <= Len(sCopy) 
		nBeg = nEnd + 1 
		nEnd = InStr(nBeg, sCopy, sSplitChar) 
		If nEnd = 0 Then 
			nEnd = Len(sCopy) + 1 
		End If 
		nCount = nCount + 1 
		ReDim arrParts(nCount) 
		If nBeg = nEnd Then 
			arrParts(nCount) = "" 
		Else 
			arrParts(nCount) = Mid$(sText, nBeg, nEnd - nBeg) 
		End If 
	Loop 
	STRINGSplit = nCount 

	Exit Function 
'------------------------- 
ErrorOccured: 
End Function

Function StringReplace(ByVal sToBeSearched As String, ByVal sSearchFor As String, ByVal sReplaceWith As String) As String
'*************************************************
'* Finds and replaces one string with another
'* in a given string
'*************************************************

Dim i, nLenR, nLenS As Integer
OnError GoTo ErrorOccured

STRINGReplace = sToBeSearched

nLenR = Len(sReplaceWith)
nLenS = Len(sSearchFor)
i = InStr(1, sToBeSearched, sSearchFor)
Do While i > 0
   sToBeSearched = Left$(sToBeSearched,i - 1) + sReplaceWith
               + Right$(sToBeSearched, Len(sToBeSearched) - ((i - 1) + nLenS))
   i = InStr(i + nLenR, sToBeSearched, sSearchFor)
Loop
STRINGReplace = sToBeSearched

Exit Function

'-------------------------
ErrorOccured:

End Function

Function GetRowLength(ByVal sTableName As String) As Integer
'*************************************************
'* Calculate the total row length for a table
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns in the table and
	' sum the column lengths
	'-------------------------------------------------
	Dim i As Integer
	Dim iRowLength As Integer
	Dim iColumnType As SmallInt
	iRowLength = 1

	For i = 1 to TableInfo(sTableName, TAB_INFO_NCOLS)
 
       iColumnType = ColumnInfo(sTableName, "col"&i, COL_INFO_TYPE)

		Do Case iColumnType
			Case 1
				iRowLength = iRowLength + ColumnInfo(sTableName, "col"&i, COL_INFO_WIDTH)
			Case 2
				iRowLength = iRowLength + ColumnInfo(sTableName, "col"&i, COL_INFO_WIDTH)
			Case 3
				iRowLength = iRowLength + 4
			Case 4
				iRowLength = iRowLength + 2
			Case 5
				iRowLength = iRowLength + 4
			Case 6
				iRowLength = iRowLength + 1
			Case 8
				iRowLength = iRowLength + 8
			Case 37
				iRowLength = iRowLength + 4
			Case 38
				iRowLength = iRowLength + 8
			Case Else
				Call MyPrint("Column type " + iColumnType + " unrecognised.  Column length unknown")
		End Case

	Next

	GetRowLength = iRowLength

End Function

Function GetUserID() As String
'*************************************************
'* Get the User ID of the current user
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns in the table and
	' sum the column lengths
	'-------------------------------------------------
	Dim sUserID As String ' receives name of the user
	Dim iLength As Integer ' length of the string
	Dim iRetVal As Integer ' return value

	'-------------------------------------------------
	' Create room in the buffer to receive the returned string
	'-------------------------------------------------
	sUserID = Space$(255)
	iLength = 255

	'-------------------------------------------------
	' Get the user id
	'-------------------------------------------------
	iRetVal = GetUserName(sUserID, iLength)

	'-------------------------------------------------
	' Extract the returned info from the buffer
	'-------------------------------------------------
	sUserID = Left$(sUserID, iLength - 1)

	GetUserID = sUserID

End Function